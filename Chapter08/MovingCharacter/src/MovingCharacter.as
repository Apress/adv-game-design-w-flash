package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import flash.geom.Rectangle;  import flash.geom.Matrix;  import flash.utils.getTimer;  import com.friendsofed.utils.*;  import com.friendsofed.vector.*;  import com.friendsofed.gameElements.primitives.*;  [SWF(width="640", height="512",   backgroundColor="#FFFFFF", frameRate="60")]  	public class MovingCharacter extends Sprite	{	  private const MAX_TILE_SIZE:uint = 64;	  private const MAP_COLUMNS:uint = 10;	  private const MAP_ROWS:uint = 8;	  	  //tile ID numbers in tile sheet	  private const PLATFORM:uint = 00;	  private const SKY:uint = 10;	  private const CAT:uint = 20;	 	  private var _platformMap:Array	    = [	        [10,10,10,10,10,10,10,10,10,10],	        [00,00,10,10,10,10,10,10,10,10],	        [10,10,10,10,10,00,00,00,00,10],	        [10,10,00,10,10,10,10,10,10,10],	        [10,10,10,10,10,10,10,10,10,10],	        [00,00,00,00,10,10,10,00,10,10],	        [00,00,00,00,00,10,10,10,10,10],	        [00,00,00,00,00,00,00,00,00,00]	      ];    	   	   private var _gameObjectMap:Array	    = [	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,20,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	      ];	        	  //Create blank BitmapData objects as the canvas for this bitmap	  //They are in two layers: background for static objects	  //like the scenery, and forground for moving objects    private var _backgroundBitmapData:BitmapData       = new BitmapData(stage.stageWidth, stage.stageHeight, true, 0);    private var _backgroundBitmap:Bitmap       = new Bitmap(_backgroundBitmapData);    private var _foregroundBitmapData:BitmapData       = new BitmapData(stage.stageWidth, stage.stageHeight, true, 0);    private var _foregroundBitmap:Bitmap       = new Bitmap(_foregroundBitmapData);  	  	//Tile sheet  	//Variables required to display the tile sheet bitmap		[Embed(source="../../images/tileSheet.png")]    private var TileSheet:Class;		private var _tileSheetImage:DisplayObject = new TileSheet();		private var _tileSheetBitmapData:BitmapData 		  = new BitmapData			  (			    _tileSheetImage.width, 			    _tileSheetImage.height, 			    true, 			    0			  );        //Create a TileModel to represent the cat    private var _catModel:TileModel;    private var _UIPlatformController:UIPlatformController;    private var _UIPlatformView:UIPlatformView         //Status box  	private var _statusBox:StatusBox = new StatusBox;				public function MovingCharacter():void		{  		  //Draw the BitmapData objects			//_catBitmapData.draw(_catImage);			_tileSheetBitmapData.draw(_tileSheetImage);					  //Add the game bitmaps			addChild(_backgroundBitmap);			addChild(_foregroundBitmap);						//Add the status box			addChild(_statusBox);						//Run the buildMap method to convert the			//map array data into a visual display			buildMap(_platformMap);			buildMap(_gameObjectMap);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				//Create tile Models and map them to the		//correct positions on the tile sheet		private function buildMap(map:Array):void	  {    for(var mapColumn:int = 0; mapColumn < MAP_COLUMNS; mapColumn++)    {      for(var mapRow:int = 0; mapRow < MAP_ROWS; mapRow++)      {        var currentTile:int = map[mapRow][mapColumn];                if(currentTile > -1)        {          //Find the tile's column and row position          //on the tile sheet          var tileSheetColumn:uint = uint(currentTile / 10);          var tileSheetRow:uint = uint(currentTile % 10);                    switch(currentTile)          {            case CAT:              _catModel    	          = new TileModel    	          (    	            MAX_TILE_SIZE,    	            tileSheetColumn, tileSheetRow,     	            mapRow, mapColumn,     	            48, 42    	          );   	              	        //Add some gravity      	        _catModel.gravity_Vy = 0.98;  	            	        //Add the UIView and UIController      	        _UIPlatformController    	          = new UIPlatformController(_catModel);  	          _UIPlatformView  		          = new UIPlatformView  		          (_catModel, _UIPlatformController, stage);  		              	        drawGameObject(_catModel, _foregroundBitmapData);    	        break;                        case PLATFORM:              var platform:TileModel               = new TileModel              (                MAX_TILE_SIZE,  	            tileSheetColumn, tileSheetRow,   	            mapRow, mapColumn,   	            MAX_TILE_SIZE, MAX_TILE_SIZE              );  	          drawGameObject(platform, _backgroundBitmapData);              break;                        case SKY:              var sky:TileModel                 = new TileModel                (                  MAX_TILE_SIZE,  	              tileSheetColumn, tileSheetRow,     	            mapRow, mapColumn,     	            MAX_TILE_SIZE, MAX_TILE_SIZE                );  	          drawGameObject(sky, _backgroundBitmapData);              break;            }            }        }      }    }       	private function enterFrameHandler(event:Event):void		{ 		  //1. UPDATE THE MODELS		  		  //Update the cat's Model		  _catModel.update();		  		  //2. CHECK FOR COLLISIONS		  		  //Stop the cat at the stage boundaries		  StageBoundaries.stopBitmap(_catModel, stage); 		  		  if(_catModel.yPos + _catModel.height >= stage.stageHeight)		  {		    _catModel.jumping = false;		  }		  		  //3. BLIT THE OBJECTS		  //Clear the stage bitmap from the previous frame so that it's		  //blank when you add the new tile positions		  _foregroundBitmapData.fillRect(_foregroundBitmapData.rect, 0);      		  //Blit the cat on the foreground bitmap		  drawGameObject(_catModel, _foregroundBitmapData);		  		  //Update status box			_statusBox.text = "MOVING CHARACTER:"; 			_statusBox.text 			  += "\n" + "CAT JUMPING: " + _catModel.jumping;  				 }	    //Basic blit method   private function drawGameObject		  (		    tileModel:TileModel, 		    screen:BitmapData		  ):void		{		  var sourceRectangle:Rectangle = new Rectangle  			(  		    tileModel.tileSheetColumn * MAX_TILE_SIZE,   		    tileModel.tileSheetRow * MAX_TILE_SIZE,   			  tileModel.width,   			  tileModel.height  			);					  	  var destinationPoint:Point = new Point      (        tileModel.xPos,         tileModel.yPos      );            screen.copyPixels        (          _tileSheetBitmapData,           sourceRectangle,           destinationPoint,          null, null, true        );	  }	}}