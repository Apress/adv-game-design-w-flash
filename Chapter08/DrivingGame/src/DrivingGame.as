package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import flash.geom.Rectangle;  import flash.geom.Matrix;  import flash.utils.getTimer;  import com.friendsofed.utils.*;  import com.friendsofed.vector.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.gameElements.car.*;  [SWF(width="640", height="512",   backgroundColor="#FFFFFF", frameRate="60")]  	public class DrivingGame extends Sprite	{	  private const MAX_TILE_SIZE:uint = 64;	  private const MAP_COLUMNS:uint = 10;	  private const MAP_ROWS:uint = 8;	  	  //Tile ID number codes	  private const ROAD:uint = 30;	  private const GRASS:uint = 31;	  private const CAR:uint = 33;	 	  private var _raceTrackMap:Array	    = [	        [31,31,31,31,31,31,31,31,31,31],	        [31,30,30,30,30,30,30,30,30,31],	        [31,30,30,30,30,30,30,30,30,31],	        [31,30,30,31,31,31,31,30,30,31],	        [31,30,30,31,31,31,31,30,30,31],	        [31,30,30,30,30,30,30,30,30,31],	        [31,30,30,30,30,30,30,30,30,31],	        [31,31,31,31,31,31,31,31,31,31]	      ];    	      	  private var _gameObjectMap:Array      = [          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,33,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],        ];          	  //Create blank BitmapData objects as the canvas for this bitmap	  //They are in two layers: background for static objects	  //like the scenery, and forground for moving objects    private var _backgroundBitmapData:BitmapData       = new BitmapData(stage.stageWidth, stage.stageHeight, true, 0);    private var _backgroundBitmap:Bitmap       = new Bitmap(_backgroundBitmapData);  	  	//Tile sheet  	//Variables required to display the tile sheet bitmap		[Embed(source="../../images/tileSheet.png")]    private var TileSheet:Class;		private var _tileSheetImage:DisplayObject = new TileSheet();		private var _tileSheetBitmapData:BitmapData 		  = new BitmapData			  (			    _tileSheetImage.width, 			    _tileSheetImage.height, 			    true, 			    0			  );        private var _carTileModel:TileModel;    private var _carController:CarController;    private var _carView:CarView;    		//Create a collision Controller 		private var _collisionController:TileCollisionController		 = new TileCollisionController();          private var _currentTile:uint = 0;    private var _mapRow:uint = 0;    private var _mapColumn:uint = 0;        //Status box  	private var _statusBox:StatusBox = new StatusBox;				public function DrivingGame():void		{  		  //Draw the BitmapData objects			//_carBitmapData.draw(_carImage);			_tileSheetBitmapData.draw(_tileSheetImage);					  //Add the background bitmap, which is the		  //race track map			addChild(_backgroundBitmap);						//Add the status box			addChild(_statusBox);						//Run the buildMap method to convert the			//map array data into a visual display			buildMap(_raceTrackMap);			buildMap(_gameObjectMap);				addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}		private function enterFrameHandler(event:Event):void		{ 		  //Update the car's Model		  _carTileModel.update();		  		  //Stop the car at the stage boundaries		  StageBoundaries.stopBitmap(_carTileModel, stage); 		  		  if(_raceTrackMap[_carTileModel.mapRow][_carTileModel.mapColumn]			  == GRASS)			{			  //Lots of friction if the car is on the grass			  _carTileModel.friction = 0.85;		  }		  else		  {		    //Otherwise, normal friction		    _carTileModel.friction = 0.98;		  }		  		  //Update status box			_statusBox.text = "DRIVING GAME:"; 			_statusBox.text 			  += "\n" + "FRICTION: " + _carTileModel.friction;			_statusBox.text 			  += "\n" + "CURRENT TILE: " 			  + _raceTrackMap[_carTileModel.mapRow][_carTileModel.mapColumn]			  + ": " 			  + _carTileModel.mapRow 			  + _carTileModel.mapColumn;  			if(_raceTrackMap[_carTileModel.mapRow][_carTileModel.mapColumn]			  == ROAD)			{		    _statusBox.text += "\n" + "ON: Road"; 		  }		  else		  {		    _statusBox.text += "\n" + "ON: Grass"; 		  }  			   		 }				//Create tile Models and map them to the		//correct positions on the tile sheet		private function buildMap(map:Array):void	  {      for(var mapColumn:int = 0; mapColumn < MAP_COLUMNS; mapColumn++)      {        for(var mapRow:int = 0; mapRow < MAP_ROWS; mapRow++)        {          var currentTile:int = map[mapRow][mapColumn];                  if(currentTile > -1)          {            //Find the tile's column and row position            //on the tile sheet            var tileSheetColumn:uint               = uint(currentTile / 10);            var tileSheetRow:uint               = uint(currentTile % 10);                        switch(currentTile)            {              case CAR:                _carTileModel  	              = new CarTileModel      	          (      	            MAX_TILE_SIZE,      	            tileSheetColumn, tileSheetRow,       	            mapRow, mapColumn,       	            48, 48      	          );   	              	        //Add the View and Controller        	        _carController      	          = new CarController(_carTileModel);    	          _carView    		          = new CarView    		          (_carTileModel, _carController, stage);    		            	            //Load the tile from the tile sheet into the  	            //car's containing Sprite      	        loadTileIntoView      	          (_carTileModel, _carView.carBitmapData);      	                	        //Add the car's View to the stage        	        stage.addChild(_carView);      	        break;                        case ROAD:                var road:TileModel                   = new TileModel                  (                    MAX_TILE_SIZE,                    tileSheetColumn, tileSheetRow,       	            mapRow, mapColumn,       	            MAX_TILE_SIZE, MAX_TILE_SIZE                  );                drawGameObject(road, _backgroundBitmapData);                          case GRASS:                var grass:TileModel                   = new TileModel                  (                    MAX_TILE_SIZE,                    tileSheetColumn, tileSheetRow,       	            mapRow, mapColumn,       	            MAX_TILE_SIZE, MAX_TILE_SIZE                  );      	        drawGameObject(grass, _backgroundBitmapData);           }         }       }     }   }				private function drawGameObject		  (		    tileModel:TileModel, 		    screen:BitmapData		  ):void		{		  var sourceRectangle:Rectangle = new Rectangle  			(  		    tileModel.tileSheetColumn * MAX_TILE_SIZE,   			  tileModel.tileSheetRow * MAX_TILE_SIZE,   			  tileModel.width,   			  tileModel.height  			);					  	  var destinationPoint:Point = new Point      (        tileModel.xPos,         tileModel.yPos      );            screen.copyPixels        (          _tileSheetBitmapData,           sourceRectangle,           destinationPoint,          null, null, true        );	  }	  	  //Loads a tile from the tile sheet	  //into the car Sprite's BitmapData obejct	  private function loadTileIntoView	    (tileModel:TileModel, bitmapData:BitmapData):void		{		  var sourceRectangle:Rectangle = new Rectangle  			(  		    tileModel.tileSheetColumn * MAX_TILE_SIZE,   			  tileModel.tileSheetRow * MAX_TILE_SIZE,   			  tileModel.width,   			  tileModel.height  			);					  	  var destinationPoint:Point = new Point(0, 0);            bitmapData.copyPixels        (          _tileSheetBitmapData,           sourceRectangle,           destinationPoint,          null, null, true        );	  }	}}