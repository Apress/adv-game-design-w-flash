package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import flash.geom.Rectangle;  import flash.geom.Matrix;  import flash.utils.getTimer;  import com.friendsofed.utils.*;  import com.friendsofed.vector.*;  import com.friendsofed.gameElements.primitives.*;  [SWF(width="640", height="512",   backgroundColor="#FFFFFF", frameRate="60")]  	public class DynamicSpatialGrid extends Sprite	{	  private const MAX_TILE_SIZE:uint = 64;	  private const MAP_COLUMNS:uint = 10;	  private const MAP_ROWS:uint = 8;	  	  //tile ID numbers in tile sheet	  private const PLAYER:uint = 02;	  	  private var _gameObjectMap:Array	    = [          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,02,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],          [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]        ]; 	  	  //Create stage bitmap    private var _stageBitmapData:BitmapData       = new BitmapData(stage.stageWidth, stage.stageHeight, true, 0);    private var _stageBitmap:Bitmap       = new Bitmap(_stageBitmapData);        	//Tile sheet  	//Variables required to display the tile sheet bitmap		[Embed(source="../../images/tileSheet.png")]    private var TileSheet:Class;		private var _tileSheetImage:DisplayObject = new TileSheet();		private var _tileSheetBitmapData:BitmapData 		  = new BitmapData			  (			    _tileSheetImage.width, 			    _tileSheetImage.height, 			    true, 			    0			  );        //Create a TileModel to represent the player    private var _playerModel:TileModel;    private var _UIController:UIController;  	private var _UIView:UIView;		  		//Create a collision Controller to handle the collision		//between the player and the platforms		//You'll find the TileCollisionController in the		//com.friendsofed.utils package		private var _collisionController:TileCollisionController		 = new TileCollisionController();          //Status box  	private var _statusBox:StatusBox = new StatusBox;  	  	//Grid Display  	private var _grid:GridDisplay   	  = new GridDisplay  	  (  	    64, stage.stageWidth, stage.stageHeight  	  );				public function DynamicSpatialGrid():void		{  		  //Draw the tile sheet objects			_tileSheetBitmapData.draw(_tileSheetImage);					  //Add the stage bitmap			addChild(_stageBitmap);						//Add the status box			addChild(_statusBox);						//Add the grid display			addChild(_grid);						//Run the buildMap method to convert the			//map array data into a visual display			buildMap(_gameObjectMap);				addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 		  		  //Clear the stage bitmap from the previous frame so that it's		  //blank when you add the new tile positions		  _stageBitmapData.fillRect(_stageBitmapData.rect, 0);            //Initialize a blank two dimensional array         var collisionMap:Array 		    = [            [[],[],[],[],[],[],[],[],[],[]],            [[],[],[],[],[],[],[],[],[],[]],            [[],[],[],[],[],[],[],[],[],[]],            [[],[],[],[],[],[],[],[],[],[]],            [[],[],[],[],[],[],[],[],[],[]],            [[],[],[],[],[],[],[],[],[],[]],            [[],[],[],[],[],[],[],[],[],[]],            [[],[],[],[],[],[],[],[],[],[]],          ];              //Alternative style of initializing the array      /*      var collisionMap:Array = new Array();      for(var row:int = 0; row < MAP_ROWS; row++)      {        collisionMap[row] = new Array();                for(var column:int = 0; column < MAP_COLUMNS; column++)        {          collisionMap[row][column] = new Array();        }      }      */            //Update the circle and check stage bounds      _playerModel.update();      StageBoundaries.bounceBitmap(_playerModel, stage);             collisionMap        [_playerModel.mapRow]        [_playerModel.mapColumn]        .push(_playerModel);            drawGameObject(_playerModel, _stageBitmapData);      		  //Update status box			_statusBox.text = "DYNAMIC SPATIAL GRID:" + "\n"; 				for			  (			    var mapRow:int = 0; 			    mapRow < MAP_ROWS; 			    mapRow++			  )        {        for          (            var mapColumn:int = 0;             mapColumn < MAP_COLUMNS;             mapColumn++          )        {                      if(collisionMap[mapRow][mapColumn][0] is TileModel)          {            _statusBox.text               += collisionMap[mapRow][mapColumn][0].id + ",";          }          else          {            _statusBox.text += "--,"          }          if(mapColumn == collisionMap[mapRow].length -1)          {            _statusBox.text += "\n";          }        }      }		}				//Create tile Models and map them to the		//correct positions on the tile sheet		private function buildMap(map:Array):void	  {      for(var mapColumn:int = 0; mapColumn < MAP_COLUMNS; mapColumn++)      {        for(var mapRow:int = 0; mapRow < MAP_ROWS; mapRow++)        {          var currentTile:int = map[mapRow][mapColumn];                  if(currentTile > -1)          {            //Find the tile's column and row position            //on the tile sheet            var tileSheetColumn:uint               = uint(currentTile / 10);            var tileSheetRow:uint               = uint(currentTile % 10);                        switch(currentTile)            {              case PLAYER:                _playerModel      	          = new TileModel      	          (      	            MAX_TILE_SIZE,      	            tileSheetColumn, tileSheetRow,       	            mapRow, mapColumn,       	            48, 48      	          );       	        //_playerModel.gravity_Vy = 0.98;  	              	        //Add the UIView and UIController        	        _UIController       	          = new UIController(_playerModel);    	          _UIView     	            = new UIView(_playerModel, _UIController, stage);    	                  	        drawGameObject(_playerModel, _stageBitmapData);      	        break;            }          }        }      }    }				private function drawGameObject		  (		    tileModel:TileModel, 		    screen:BitmapData		  ):void		{		  var sourceRectangle:Rectangle = new Rectangle  			(  		    tileModel.tileSheetColumn * MAX_TILE_SIZE,   			  tileModel.tileSheetRow * MAX_TILE_SIZE,   			  tileModel.width,   			  tileModel.height  			);					  	  var destinationPoint:Point = new Point      (        tileModel.xPos,         tileModel.yPos      );            screen.copyPixels        (          _tileSheetBitmapData,           sourceRectangle,           destinationPoint,          null, null, true        );	  }	}}