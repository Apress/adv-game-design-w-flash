package player{	import flash.events.Event;	import flash.events.EventDispatcher;	public class PlayerModel extends EventDispatcher	{	  private const SPEED:uint = 10;		private var _xPos:Number = 0;		private var _yPos:Number = 0;		public var temporaryX:Number = 0;		public var temporaryY:Number = 0;		public var width:Number = 50;		public var height:Number = 50;		public var previousX:Number = 0;		public var previousY:Number = 0;		public function PlayerModel():void 		{		}				public function update():void		{			//Verlet integration:			temporaryX = xPos;			temporaryY = yPos;						xPos += vx;			yPos += vy;						previousX = temporaryX;			previousY = temporaryY;		}		//Getters and setters		public function get vx():Number		{			return xPos - previousX;		}		public function set vx(value:Number):void		{			previousX = xPos - value;		}				//vy		public function get vy():Number		{			return yPos - previousY;		}		public function set vy(value:Number):void		{			previousY = yPos - value;		}				//xPos		public function get xPos():Number		{			return _xPos;		}		public function set xPos(value:Number):void		{			_xPos = value;			dispatchEvent(new Event(Event.CHANGE));		}				//yPos		public function get yPos():Number		{			return _yPos;		}		public function set yPos(value:Number):void		{			_yPos = value;			dispatchEvent(new Event(Event.CHANGE));		}		//setX		public function set setX(value:Number):void		{			previousX = value;						//Sets the public xPos setter			//which forces the CHANGE event			//to be dispatched			xPos = value;		}				//setY		public function set setY(value:Number):void		{			previousY = value;						//Sets the public yPos setter			//which forces the CHANGE event			//to be dispatched			yPos = value;		}    //speed		public function get speed():uint		{ 		  return SPEED; 		}	}}