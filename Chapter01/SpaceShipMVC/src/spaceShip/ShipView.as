package spaceShip{	import flash.display.*;	import flash.filters.*;	import flash.events.Event;	import com.friendsofed.utils.*;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;		//Required for creating a gradient fill	import flash.display.GradientType;	import flash.geom.Matrix;	public class ShipView extends Sprite	{	  private var _shipShape:Shape;		private var _thrusterShape:Shape;				//The _spaceShip Sprite contains the ship graphics		private var _spaceShip:Sprite;				//Variable that contains the model of the ship		private var _model:Object;				//Variable that contains the model of the ship		private var _controller:Object;		public function ShipView(model:Object, controller:Object):void		{			_model = model;			_model.addEventListener(Event.CHANGE, changeHandler);			_controller = controller;			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(event:Event):void		{			  //Draw the ship			drawSpaceShip();						//Position ship			this.x = _model.xPos;			this.y = _model.yPos;						//Add listeners			stage.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);			stage.addEventListener(KeyboardEvent.KEY_UP,onKeyUp);						//Remove this listener			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onKeyDown(event:KeyboardEvent):void		{			_controller.processKeyDown(event);		}				private function onKeyUp(event:KeyboardEvent):void		{			_controller.processKeyUp(event);		}				private function drawSpaceShip():void		{		  var size:uint = _model.width;		  			//Create the gradient fill effect for the thruster			var matrix:Matrix = new Matrix();			matrix.createGradientBox			  (			    size * 0.5, 			    size / 3, 			    (90 * Math.PI / 180), 			    0, 			    size			  );			var colors:Array = [0xFF3300, 0xFFFF00];			var alphas:Array = [100, 0]; 			var ratios:Array = [0, 255];						//Draw the thruster flame			_thrusterShape = new Shape();			_thrusterShape.graphics.lineStyle(1, 0x000000, 0);			_thrusterShape.graphics.beginGradientFill			  (			    GradientType.LINEAR, colors, alphas, ratios, matrix			  );						_thrusterShape.graphics.moveTo			  (			    size * 0.25, size * 0.75			  ); 			_thrusterShape.graphics.curveTo			  (			    size * 0.5, 			    size, 			    size * 0.25 * 3, 			    size * 0.75			  );			_thrusterShape.graphics.lineTo			  (			    size * 0.25, size * 0.75			  );  			_thrusterShape.graphics.endFill();			_thrusterShape.visible = false;						//Add a blur filter to the thruster			var thrusterFilters:Array = new Array();			thrusterFilters = _thrusterShape.filters;			thrusterFilters.push(new BlurFilter(5, 5, 3));			_thrusterShape.filters = thrusterFilters;						//Draw the ship			_shipShape = new Shape();			//Omit the lineStyle method if you			//don't want a line around the shape			//Set the optional starting position (default is 0,0)			_shipShape.graphics.moveTo(0, size); 			//Start the fill			var color:uint = _model.color;			_shipShape.graphics.beginFill(color);			//Draw the connecting lines			_shipShape.graphics.lineTo(size * 0.5, 0);			_shipShape.graphics.lineTo(size, size);			_shipShape.graphics.curveTo			  (size * 0.5, size * 0.5, 0, size);			//End the fill			_shipShape.graphics.endFill();						//Create a new Sprite to contain the shapes			_spaceShip = new Sprite();		  _spaceShip.addChild(_thrusterShape);			_spaceShip.addChild(_shipShape);			addChild(_spaceShip);						//Position the ship in the center and rotate it to the right			_spaceShip.rotation = 90;			_spaceShip.x += size * 0.5;			_spaceShip.y -= size * 0.5;									//Add a bevel and drop shadow filter to the ship			var shipFilters:Array = new Array();			shipFilters = _shipShape.filters;			shipFilters.push			  (			    new BevelFilter			    (			      2, 135, 0xFFFFFF, 0.50, 			      0x000000, 0.50, 2, 2			    )			  );			shipFilters.push			  (			    new DropShadowFilter			    (			      2, 135, 0x000000, 0.35, 2, 2			    )			  );			_shipShape.filters = shipFilters;		}		private function changeHandler(event:Event):void		{			this.x = _model.xPos;			this.y = _model.yPos;			this.rotation = _model.rotationValue;			if(_model.thrusterFired)			{				_thrusterShape.visible = true;			}			else			{				_thrusterShape.visible = false;			}		}	}}