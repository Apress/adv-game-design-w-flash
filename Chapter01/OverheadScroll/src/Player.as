package{	//import utils.*;	import flash.display.*;	import flash.events.Event;		//Keyboard Events	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	public class Player extends Sprite	{		private const SPEED:uint = 10;		private var _xSpeed:Number;		private var _ySpeed:Number;		private var _shape:Shape;				//Variables required for Verlet integration		private var _vx:Number;		private var _vy:Number;		private var _oldX:Number;		private var _oldY:Number;		private var _xPos:Number;		private var _yPos:Number;		private var _temporaryX:Number;		private var _temporaryY:Number;				//The _playerSprite Sprite contains the ship graphics		private var _playerSprite:Sprite;		public function Player()		{			_vx = 0;			_vy = 0;			_xPos = 0;			_yPos = 0;			_oldX = 0;			_oldY = 0;			_temporaryX = 0;			_temporaryY = 0;			_xSpeed = 0;			_ySpeed = 0;						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(event:Event):void		{			//Draw the player			drawPlayer();						//Add listeners			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			stage.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);			stage.addEventListener(KeyboardEvent.KEY_UP,onKeyUp);		}		private function onRemovedFromStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}		private function drawPlayer():void		{			//Draw the ship			_shape = new Shape();			_shape.graphics.lineStyle();			_shape.graphics.moveTo(0, 0); 			_shape.graphics.beginFill(0x000000);			_shape.graphics.drawRect(-25, -25, 50, 50)			_shape.graphics.endFill();			addChild(_shape);						//Optionally, create a new sprite to contain the shapes			//_playerSprite = new Sprite();			//_playerSprite.addChild(_shape);			//addChild(_playerSprite);			//Position player in center			//_playerSprite.x = this.x - _playerSprite.height/2;			//_playerSprite.y = this.y - _playerSprite.width/2;		}		private function onKeyDown(event:KeyboardEvent):void		{			if (event.keyCode == Keyboard.LEFT)			{				_xSpeed = -SPEED;			}			if (event.keyCode == Keyboard.RIGHT)			{				_xSpeed = SPEED;			}			if (event.keyCode == Keyboard.UP)			{				_ySpeed = -SPEED;			}			if (event.keyCode == Keyboard.DOWN)			{				_ySpeed = SPEED;			}		}		private function onKeyUp(event:KeyboardEvent):void		{			if (event.keyCode == Keyboard.LEFT || event.keyCode == Keyboard.RIGHT)			{				_xSpeed = 0;			}			if (event.keyCode == Keyboard.UP || event.keyCode == Keyboard.DOWN)			{				_ySpeed = 0;			}		}			//The update function is called by the document class's		//onEnterFrame event		public function update():void		{			//Verlet integration in action:			//1. Temporarily store the current x and y positions			_temporaryX = _xPos;			_temporaryY = _yPos;						//Add the x and y speed to the velocity			//vx = _xSpeed;			//vy = _ySpeed;						//2. Apply the velocity to the position			//The public vx and vy getters and setter			//dynamically calculate velocity based on			//the difference between the current position			//and the old position			_xPos += _xSpeed;			_yPos += _ySpeed;						//3. The previous position becomes the			//old position which is used calculate velocity			_oldX = _temporaryX;			_oldY = _temporaryY;		}		//Public properties		public function set vx(value:Number):void		{			_oldX = _xPos - value;		}		public function get vx():Number		{			return _xPos - _oldX;		}		//vy		public function set vy(value:Number):void		{			_oldY = _yPos - value;		}		public function get vy():Number		{			return _yPos - _oldY;		}		//xPos		public function set xPos(value:Number):void		{			_xPos = value;		}		public function get xPos():Number		{			return _xPos;		}		//yPos		public function set yPos(value:Number):void		{			_yPos = value;		}		public function get yPos():Number		{			return _yPos;		}		//setX		public function set setX(value:Number):void		{			_oldX = value;			_xPos = value;		}		//setY		public function set setY(value:Number):void		{			_oldY = value;			_yPos = value;		}	}}