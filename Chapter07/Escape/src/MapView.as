package{	import flash.display.*;	import flash.events.Event;	import flash.geom.Matrix;	import flash.filters.*;	import flash.events.TimerEvent;	import flash.utils.Timer;		public class MapView extends Sprite	{		private var _gameModel:Object;		private var _scaleAmount:Number;		private var _mapBoundary:Shape;		private var _playerMarker:Shape = new Shape();		private var _playersTurretMarker:Shape = new Shape();		private var _ufoMarker:Shape = new Shape();		private var _fuelOrbMarkers:Array = [];		private var _cannonMarkers:Array = [];		private var _stage:Object;		private var _timer:Timer = new Timer(100);		public function MapView(model:Object, stage:Object)		{			_gameModel = model;			_scaleAmount = 0.06;			_stage = stage;			_timer.addEventListener(TimerEvent.TIMER, timerEventHandler);			_timer.start();						//Draw the map			drawMap();		}		private function drawMap():void		{			//Create a map based on the bitmap			var mapWidth:Number 			  = _gameModel.caveBitmapData.width * _scaleAmount;      var mapHeight:Number         = _gameModel.caveBitmapData.height * _scaleAmount;      var mapBitmapData:BitmapData         = new BitmapData(mapWidth, mapHeight, false, 0x000000);      var scaleMatrix:Matrix = new Matrix();      scaleMatrix.scale(_scaleAmount, _scaleAmount);      mapBitmapData.draw(_gameModel.caveBitmapData, scaleMatrix);      var mapBitmap:Bitmap = new Bitmap(mapBitmapData);            //Add bevel and drop shadow filters to the map      var filters:Array = [];			filters = mapBitmap.filters;			filters.push			  (			    new BevelFilter			    (			      2, 135, 0xFFFFFF, 0.50, 			      0x000000, 0.50, 2, 2			    )			  );			filters.push			  (			    new DropShadowFilter			    (			      3, 135, 0x000000, 			      0.75, 2, 2			    )			  );			mapBitmap.filters = filters;						//Add the map      addChild(mapBitmap)            //Create the Player marker			_playerMarker.graphics.lineStyle();			_playerMarker.graphics.beginFill(0xFFFF00);			_playerMarker.graphics.drawRect(-2, -2, 4, 4);			_playerMarker.graphics.endFill();			addChild(_playerMarker);						//Create the UFO marker			_ufoMarker.graphics.lineStyle();			_ufoMarker.graphics.beginFill(0xFFFFFF);			_ufoMarker.graphics.drawRect(-2, -2, 4, 4);			_ufoMarker.graphics.endFill();			addChild(_ufoMarker);						//Create the player's turret marker			_playersTurretMarker.graphics.lineStyle();			_playersTurretMarker.graphics.beginFill(0x66FF33);			_playersTurretMarker.graphics.drawRect(-2, -2, 4, 4);			_playersTurretMarker.graphics.endFill();			addChild(_playersTurretMarker);						//Position the player's turret marker on the map			_playersTurretMarker.x 			  = (-_gameModel.caveBitmap.x 			  + _gameModel.playersTurretModel.xPos) * _scaleAmount;			_playersTurretMarker.y 			  = (-_gameModel.caveBitmap.y 			  + _gameModel.playersTurretModel.yPos) * _scaleAmount;						//Create the fuel orb markers			for(var i:int = 0; i < _gameModel.fuelOrbModels.length; i++)      {        //Draw the marker        var fuelOrbMarker:Shape = new Shape();        fuelOrbMarker.graphics.lineStyle();			  fuelOrbMarker.graphics.beginFill(0x66FF33);			  fuelOrbMarker.graphics.drawRect(-2, -2, 4, 4);			  fuelOrbMarker.graphics.endFill();			  addChild(fuelOrbMarker);			  			  //Position the marker on the map			  fuelOrbMarker.x 			    = (			        -_gameModel.caveBitmap.x 			        + _gameModel.fuelOrbModels[i].xPos			      ) 			    * _scaleAmount;			  fuelOrbMarker.y 			    = (			        -_gameModel.caveBitmap.y 			        + _gameModel.fuelOrbModels[i].yPos			      ) 			    * _scaleAmount;			  			  //Push the marker into the _fuelOrbMarkers array			  _fuelOrbMarkers.push(fuelOrbMarker);      }            //create the enemy canon markers			for(var j:int = 0; j < _gameModel.cannonModels.length; j++)      {        //Draw the marker        var cannonMarker:Shape = new Shape();        cannonMarker.graphics.lineStyle();			  cannonMarker.graphics.beginFill(0xFFFFFF);			  cannonMarker.graphics.drawRect(-2, -2, 4, 4);			  cannonMarker.graphics.endFill();			  addChild(cannonMarker);			  			  //Position the marker on the map			  cannonMarker.x 			    = (			        -_gameModel.caveBitmap.x 			        + _gameModel.cannonModels[j].xPos			      ) 			    * _scaleAmount;			  cannonMarker.y 			    = (			        -_gameModel.caveBitmap.y 			        + _gameModel.cannonModels[j].yPos			      ) 			    * _scaleAmount;			  			  //Push the marker into the _fuelOrbMarkers array			  _cannonMarkers.push(cannonMarker);      }		}				private function timerEventHandler(event:Event):void		{		  //Move the player marker		  _playerMarker.x 		    = (		        -_gameModel.caveBitmap.x 		        + _gameModel.playerModel.xPos		      ) 		    * _scaleAmount;			_playerMarker.y 			  = (			      -_gameModel.caveBitmap.y 			      + _gameModel.playerModel.yPos			    ) 			  * _scaleAmount;						//Move the ufo marker			_ufoMarker.x 			  = (			      -_gameModel.caveBitmap.x 			      + _gameModel.ufoModel.xPos			    ) 			  * _scaleAmount;			_ufoMarker.y 			  = (			      -_gameModel.caveBitmap.y 			      + _gameModel.ufoModel.yPos			    ) 			  * _scaleAmount;						//If objects disappear from the stage, 			//they should also disappear from the map						//Check if the player's turret has been picked up, 			//and make it's marker			//invisible if it has been			if(_gameModel.playersTurretModel.turretIsActive)			{			  _playersTurretMarker.visible = false;			}			else			{			  _playersTurretMarker.visible = true;			}						//Check UFO visibility			if(_gameModel.ufoModel.visible == false)			{			  _ufoMarker.visible = false;			}			else			{			  _ufoMarker.visible = true;			}						//Check fuel orb visibility			for(var i:int = 0; i < _gameModel.fuelOrbModels.length; i++)      {        if(_gameModel.fuelOrbViews[i].visible == false)        {          _fuelOrbMarkers[i].visible = false;        }        else        {          _fuelOrbMarkers[i].visible = true;        }      }            //Check enemy cannon visibility      for(var j:int = 0; j < _gameModel.cannonModels.length; j++)      {        if(_gameModel.cannonViews[j].visible == false)        {          _cannonMarkers[j].visible = false;        }        else        {          _cannonMarkers[j].visible = true;        }      }		}	}}