package{  import flash.events.Event;  import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.ui.Mouse;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.media.Sound;  import flash.media.SoundChannel;	import com.friendsofed.gameElements.primitives.*;	import com.friendsofed.utils.*;	public class GameView extends Sprite	{	  private var _gameModel:GameModel;	  private var _gameController:GameController;	  private var _stage:Object;				//Create the game start and game over screens		private var _gameStartScreen:Sprite = new Sprite();		private var _gameOverScreen:Sprite = new Sprite();				//Create a Sprite to hold the map, fuel and shield meters		private var _dataScreen:Sprite = new Sprite();				//The timer that delays the display 		//of the game over screen by 2 seconds		private var _timer:Timer = new Timer(2000);				//Game Over message		private var _gameOverMessage:EasyText = new EasyText("", 32);				//Play Again button		private var _playAgainButton:EasyButton 		  = new EasyButton("Play\nAgain", 16, 65, 50); 				//Button Sound    [Embed(source="../assets/sounds/itemPickup.mp3")]    private var ButtonSound:Class;    private var _buttonSound:Sound = new ButtonSound();    private var _buttonSoundChannel:SoundChannel = new SoundChannel();	  		public function GameView		  (model:GameModel, controller:GameController, stage:Object):void		{		  _gameModel = model;			_gameModel.addEventListener(Event.CHANGE, changeHandler);			_gameController = controller;			this._stage = stage;			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}		private function addedToStageHandler(event:Event):void		{			  //Preload the gameScreen to improve performance,		  //but set its visibility to false		  addChild(_gameModel.screen);		  _gameModel.screen.visible = false;		  		  //Build the Game Over screen		  _gameOverScreen.addChild(_gameOverMessage);		  _gameOverScreen.addChild(_playAgainButton);			_playAgainButton.addEventListener			  (MouseEvent.CLICK, _playAgainButtonHandler);		  		  //Display the start screen		  displayGameStart();		  			//Add listeners			addEventListener			  (Event.REMOVED_FROM_STAGE, removedFromStageHandler);		}		private function removedFromStageHandler(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			removeEventListener			  (Event.REMOVED_FROM_STAGE, removedFromStageHandler);		}	  private function displayGameStart():void		{ 		  //Build the game start screen		  addChild(_gameStartScreen);		  		  //Create the title text		  var textBox:EasyText = new EasyText("Escape!", 46);		  _gameStartScreen.addChild(textBox);		   		  //Center the text on the stage 		  textBox.x = _stage.stageWidth / 2 - textBox.width / 2;		  textBox.y = _stage.stageHeight / 2 - textBox.height;		  		  //Create the start game buttons		  var startGameButton:EasyButton 		    = new EasyButton("Play\nGame", 16, 55, 50);		  _gameStartScreen.addChild(startGameButton);		  startGameButton.x 		    = textBox.x + textBox.width / 2 - startGameButton.width / 2;			startGameButton.y 			  = textBox.y + textBox.height + 20;			startGameButton.addEventListener			  (MouseEvent.CLICK, displayGameHandler);		}	  private function displayGameHandler(event:Event):void		{		  //Play the button sound		  _buttonSoundChannel = _buttonSound.play();		  		  //Remove the game start screen		  removeChild(_gameStartScreen);		  		  _gameModel.screen.visible = true;		  			//Build the data display						//Create the map view		  var mapView:MapView = new MapView(_gameModel, _stage);		  _dataScreen.addChild(mapView);		  		  //Position the map in the bottom left corner		  mapView.x = _stage.stageWidth - mapView.width;			mapView.y = _stage.stageHeight - mapView.height - 27;						//Create the player's shield view		  var playerShieldView:ShieldView = new ShieldView(_gameModel);		  _dataScreen.addChild(playerShieldView);		  playerShieldView.width = mapView.width;			playerShieldView.x 			  = _stage.stageWidth - playerShieldView.width;			playerShieldView.y 			  = _stage.stageHeight - playerShieldView.height -7;						//Create the UFO's shield view		  var ufoShieldView:UfoShieldView = new UfoShieldView(_gameModel);		  _dataScreen.addChild(ufoShieldView);		  ufoShieldView.width = mapView.width;			ufoShieldView.x = _stage.stageWidth - ufoShieldView.width;			ufoShieldView.y = 5;						//Create the fuel view		  var fuelView:FuelView = new FuelView(_gameModel);		  _dataScreen.addChild(fuelView);		  fuelView.width = mapView.width;			fuelView.x = _stage.stageWidth - fuelView.width;			fuelView.y = _stage.stageHeight - fuelView.height + 5;						//Add the data screen			addChild(_dataScreen);						//Return focus to the stage			stage.focus = stage;						//Hide the mouse			//Mouse.hide();	  }	  private function displayGameOverHandler(event:TimerEvent):void		{ 		  _gameModel.screen.visible = false;		  _dataScreen.visible = false;		  		  //Build the game over screen		  addChild(_gameOverScreen);		  		  //Display the game over message		  _gameOverMessage.text = "Game Over"		  if(_gameModel.winner == "ufo")		  {		    _gameOverMessage.text += "\n" + "You Lost!";	    }	    else	    {	      _gameOverMessage.text += "\n" + "You Won!";	    }	    //Align the Game Over message		  _gameOverMessage.x 		    = _stage.stageWidth / 2 - _gameOverMessage.width / 2;		  _gameOverMessage.y 		    = _stage.stageHeight / 2 - _gameOverMessage.height;		  		  //Align the Play Again button		  _playAgainButton.x 		    = _gameOverMessage.x 		    + _gameOverMessage.width / 2 		    - _playAgainButton.width / 2;			_playAgainButton.y 			  = _gameOverMessage.y + _gameOverMessage.height + 20;					  //Remove the timer event and reset it		  _timer.removeEventListener		    (TimerEvent.TIMER, displayGameOverHandler);		  _timer.reset();	  }	  	  private function _playAgainButtonHandler(event:MouseEvent):void		{ 		  //Play the button sound		  _buttonSoundChannel = _buttonSound.play();		  		  //Tell the controller to reset the game		  _gameController.resetGame();		 		  //Remove the game over screen		  removeChild(_gameOverScreen);		  		  //Make the GameView objects visible again		  _gameModel.screen.visible = true;		  _dataScreen.visible = true;		  		  //Return focus to the stage		  stage.focus = stage;	  }	  	  private function changeHandler(event:Event):void		{		  //End the game if the model says its over 		  //Delay the display of the Game Over screen for 2 seconds		  //so that the final explosions can be seen		  		  if(_gameModel.gameOver)		  {	      _timer.addEventListener	        (TimerEvent.TIMER, displayGameOverHandler);	      _timer.start();		  }	  }	}}