package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.lunarLander.*;  import com.friendsofed.gameElements.ufo.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]  	public class LineOfSight extends Sprite	{			//Create the lander and add its UI controller  		private var _lander:LanderModel   		  = new LanderModel(30,30);  		private var _landerUIController:LanderUIController   		  = new LanderUIController(_lander);  		private var _lander_View:LanderView   		  = new LanderView(_lander);  		private var _landerUIView:LanderUIView   		  = new LanderUIView(_lander, _landerUIController, stage);  		  		//Create the UFO Model and View  		private var _ufo:UfoModel = new UfoModel(40,30);  		private var _ufo_View:UfoView = new UfoView(_ufo);  		  		//Create the Lander's BitmapData  		private var _landerBitmapData:BitmapData   		  = new BitmapData(_lander.width, _lander.height, true, 0);  		  		//Status box  		private var _statusBox:StatusBox = new StatusBox;            //Asteroid      private var _asteroidImage:DisplayObject;		  private var _asteroidBitmap:Bitmap;			private var _asteroidBitmapData:BitmapData;						//Vector between the lander and the asteroid			private var _v0:VectorModel = new VectorModel();						//Optional Vector between the enemy and the lander			/*			private var _distance:VectorModel = new VectorModel();			private var _distance_View:VectorView 			  = new VectorView(_distance);			*/ 						//Embed the Asteroid image      [Embed(source="../assets/images/asteroid.png")]      private var AsteroidImage:Class;				public function LineOfSight():void		{ 		  //Add the lander to the stage			addChild(_lander_View);			_lander.setX = 250;			_lander.setY = 50;						//Add the enemy			addChild(_ufo_View);			_ufo.setX = 100;			_ufo.setY = 300;						//Assign the lander to the UFO's player property			//so the UFO's AI has access to it			_ufo.player = _lander;						//Add vector view			//addChild(_distance_View);						//Add gravity			_lander.gravity_Vy = 0.1;						//Create a new instance of the CaveImage class			_asteroidImage = new AsteroidImage();						//Create a BitmapData object to store the image			_asteroidBitmapData 			  = new BitmapData			  (			    _asteroidImage.width, _asteroidImage.height, true, 0			  );			_asteroidBitmapData.draw(_asteroidImage);						//Create and add the asteroid bitmap			_asteroidBitmap = new Bitmap(_asteroidBitmapData);			addChild(_asteroidBitmap);			_asteroidBitmap.x = 200;			_asteroidBitmap.y = 100						//Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 						//Update the lander			_lander.update();			StageBoundaries.wrapBitmap(_lander, stage); 						//Update the ufo			_ufo.update();			StageBoundaries.wrapBitmap(_ufo, stage);						//Draw the lander's View onto its bitmapData			_landerBitmapData.draw(_lander_View); 						//Vector between the lander and the asteroid			_v0.update			  (			    _lander.xPos + _lander.width * 0.5, 			    _lander.yPos + _lander.height * 0.5, 			    _asteroidBitmap.x + _asteroidBitmap.width * 0.5, 			    _asteroidBitmap.y + _asteroidBitmap.height * 0.5			  );						//Optionally use a VectorModel to help with the			//vector calculations			/*			//Vector between the UFO and the lander			_distance.update			  (			    _ufo.xPos + _ufo.width * 0.5, 			    _ufo.yPos + _ufo.height * 0.5, 			    _lander.xPos + _lander.width * 0.5, 			    _lander.yPos + _lander.height * 0.5			  );			*/						//Check whether the enemy can see the lander						//1. Find the center points of the Lander and UF0			var lander_X:int = int(_lander.xPos + _lander.width * 0.5);			var lander_Y:int = int(_lander.yPos + _lander.height * 0.5);			var ufo_X:int = int(_ufo.xPos + _ufo.width * 0.5);			var ufo_Y:int = int(_ufo.yPos + _ufo.height * 0.5);						//2. Create the distance vector between the UFO and Lander      var vx:Number = lander_X - ufo_X;      var vy:Number = lander_Y - ufo_Y;      //3. Find the vector's magnitude       var magnitude:Number = Math.sqrt(vx * vx + vy * vy);      //4. Find the unit vector      var dx:Number = vx / magnitude;      var dy:Number = vy / magnitude;	    	    //5. Create a segment that is the size of the space      //between each point.	    //The segment should be no bigger than the smallest object	    //in the game that enemy needs to find. The Lander's width	    //will do for this example.		  var segment:int = _lander.width;		  		  //6. Figure out the maximum number of times 		  //you'll need to run the loop		  var numberOfPoints:uint = uint(magnitude / segment);		  		  //7. Create vectors of increasing length, in the direction		  //of the Lander, but starting from the UFO.		  //If the end Point of the vector hits the asteroid		  //then you know that the Lander isn't visible.			var counter:int = 0;			while (counter++ != numberOfPoints) 	    {	      trace(counter);	      //Scale the vector to the size of one segment,	      //multiplied by the current counter value	      var vectorLength:int = segment * counter;	      	      //Create a Point object at the end of the vector                                       	      var point:Point 	        = new Point	        (	          ufo_X + dx * vectorLength, 	          ufo_Y + dy * vectorLength	        ); 	       	      //Check wether that Point is touching the asteroid    	      if(_asteroidBitmapData.hitTest			      (			        new Point(_asteroidBitmap.x, _asteroidBitmap.y), 			        255, 			        point			      )			    )                                    			  {  			    //If it does touch the asteroid, then the			    //Lander can't be visible and we can break the loop	        _ufo.playerIsVisible = false;	        break;	      }	      else	      {	        //If it's not touching the asteroid, then	        //the player could be visible. If this remains	        //true by the end of the loop, then the UFO	        //clearly has line of sight	        _ufo.playerIsVisible = true;	      }	      	      //Optional:	      //If you're using vector graphics, like Sprites or	      //MovieClips, you can use a simple hitTestPoint	      //like this:   	      /*                            	      if(_asteroidSprite.hitTestPoint(point.x, point.y, true))	      {	        //The lander can't be seen	        _ufo.playerIsVisible = false;	        break;	      }	      else	      {	        //The lander can be seen	        _ufo.playerIsVisible = true;	      }	      */      }        //Ease the UFO towards the Lander if      //it has line of sight      if(_ufo.playerIsVisible       && magnitude > 1)      {		    _ufo.vx += dx * 0.1;		    _ufo.vy += dy * 0.1;		  }         						var landerBitmap:Object 			  = createBitmap(_lander, _lander_View, true);						var loopCounter:int = 0;		  while (loopCounter++ != 10) 		  {			  if(landerBitmap.bitmapData.hitTest			      (			        new Point(_lander.xPos, _lander.yPos), 			        255, 			        _asteroidBitmap,			        new Point(_asteroidBitmap.x, _asteroidBitmap.y),			        255			      )			    )			  {			    //Switch off gravity			 	  _lander.gravity_Vy = 0;			 	  			 	  //Move the lander out of the collision in the direction			 	  //of the distance vector.			 	  _lander.setX = _lander.xPos - _v0.dx;			    _lander.setY = _lander.yPos - _v0.dy;			    _lander.vx = 0;			    _lander.vy = 0;		      			  } 			  else 			  {			    break;			  }		  }		  		  //Switch gravity back on if there is no ground below the lander		  if(!landerBitmap.bitmapData.hitTest		      (		        new Point(_lander.xPos, _lander.yPos + 1), 			      255, 			      _asteroidBitmap,			      new Point(_asteroidBitmap.x, _asteroidBitmap.y),			      255			    )			  )			{			  _lander.gravity_Vy = 0.1;		  }		        //Update status box			_statusBox.text = "LINE OF SIGHT:";   			_statusBox.text 			  += "\n" + "LANDER IS VISIBLE: " + _ufo.playerIsVisible;			_statusBox.text 			  += "\n" + "UFO X " + _ufo.xPos;     		}				private function createBitmap		  (		    model:AVerletModel, 		    view:AVerletView, 		    alphaTransparency:Boolean		  ):Object		{		  //BitmapData(width, height, transparent?, fillColor(0 is alpha))			var bitmapData:BitmapData 			  = new BitmapData			  (			    model.width, model.height, alphaTransparency, 0			  );			bitmapData.draw(view);			var bitmap:Bitmap = new Bitmap(bitmapData);						//Create the object to return to the caller			var bitmapObject:Object = new Object;			bitmapObject.bitmapData = bitmapData;			bitmapObject.bitmap = bitmap;						return bitmapObject;		}	}}