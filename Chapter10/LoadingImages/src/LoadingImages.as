package{          import flash.net.FileReference;  import flash.net.FileFilter;  import flash.utils.ByteArray;  import flash.text.*;  import flash.display.*;  import flash.events.MouseEvent;  import flash.events.Event;  import com.friendsofed.utils.StatusBox;  import com.friendsofed.utils.EasyButton;  [SWF(backgroundColor="0xFFFFFF", frameRate="30",   width="550", height="400")]  public class LoadingImages extends Sprite  {    //Create a FileReference object and an XML    //object to store the data in    private var _fileReference:FileReference = new FileReference;    private var _imageLoader:Loader = new Loader();        private var _loadButton:EasyButton 		  = new EasyButton("Load", 10, 40, 21);		  		//Status box  		private var _status:StatusBox;      		        public function LoadingImages():void    {      _status = new StatusBox("LOADING IMAGES");      addChild(_status);            //Add buttons      addChild(_loadButton);		  _loadButton.y = 35;		  _loadButton.x = 10;		  		  //Button listeners		  _loadButton.addEventListener		    (MouseEvent.CLICK, loadHandler);    }        private function loadHandler(event:MouseEvent):void		{		  //Create a FileFilter to prevent the user from		  //opening any file type except XML files		  var fileFilter:FileFilter 		    = new FileFilter		    (		      "Images: (*.jpeg, *.jpg, *.gif, *.png)", 		      "*.jpeg; *.jpg; *.gif; *.png"		    );		    		  //Allow the user to browse for the new file.		  //Pass the fileFilter as an argument      _fileReference.browse([fileFilter]);            //FileReference SELECT listener. This is fired when the      //user selects the correct file		  _fileReference.addEventListener(Event.SELECT, selectHandler);		}   		    private function selectHandler(event:Event):void		{		  trace("File selected");		  		  //Remove the SELECT listener		  _fileReference.removeEventListener(Event.SELECT, selectHandler);       //... Optionally display a loading bar if laoding      //a file from a server         //Add a listener to check whether the file has     //successfully loaded      _fileReference.addEventListener        (Event.COMPLETE, loadCompleteHandler);              //Load the file from the hard drive      _fileReference.load();		}        private function loadCompleteHandler(event:Event):void		{		  //Remove the listener		  _fileReference.removeEventListener        (Event.COMPLETE, loadCompleteHandler);            //Create a new Loader object, This is needed to      //loading SWF files and images		  var loader:Loader = new Loader();          //Listen for when file is loaded into the loader      loader.contentLoaderInfo.addEventListener        (Event.COMPLETE, loadBytesHandler);            //Load the file into the loader object      loader.loadBytes(_fileReference.data);	  }	  	  private function loadBytesHandler(event:Event):void		{		  //Create a loaderInfo object from the event.target		  //This contains the loaders content (the image)		  var loaderInfo:LoaderInfo = (event.target as LoaderInfo);		        loaderInfo.removeEventListener         (Event.COMPLETE, loadBytesHandler);            //Create a bitmap from the loaderInfo object's      //content property      var image:Bitmap = Bitmap(loaderInfo.content);            //Add the bitmap to the stage      addChild(image);      image.x = 60;      image.y = 60;	  }  }}