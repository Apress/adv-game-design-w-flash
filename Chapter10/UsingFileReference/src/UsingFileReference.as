package{          import flash.net.FileReference;  import flash.net.FileFilter;  import flash.text.*;  import flash.display.Sprite;  import flash.events.MouseEvent;  import flash.events.Event;  import com.friendsofed.utils.StatusBox;  import com.friendsofed.utils.EasyButton;  [SWF(backgroundColor="0xFFFFFF", frameRate="30",   width="550", height="400")]  public class UsingFileReference extends Sprite  {    //Create a FileReference object and an XML    //object to store the data in    private var _fileReference:FileReference = new FileReference();        //Text labels    private var _textFieldLabel:TextField = new TextField();        //Input and output textfields    private var _textField:TextField = new TextField();        //Buttons    private var _saveButton:EasyButton 		  = new EasyButton("Save", 10, 40, 21);		private var _loadButton:EasyButton 		  = new EasyButton("Load", 10, 40, 21);   		private var _clearButton:EasyButton 		  = new EasyButton("Clear text", 10, 80, 21);		  		//Status box  		private var _status:StatusBox;      		        public function UsingFileReference():void    {      _status = new StatusBox("USING FileReference");      addChild(_status);            //Text field label      addChild(_textFieldLabel);      _textFieldLabel.x = 10;      _textFieldLabel.y = 70;      _textFieldLabel.text = "XML data:";            //TextField      addChild(_textField);      _textField.x = 10;      _textField.y = _textFieldLabel.y + 20;      _textField.width = 300;      _textField.height = 200;      _textField.multiline = true;      _textField.wordWrap = true;      _textField.border = true;      _textField.background = true;      _textField.selectable = true;      _textField.type = TextFieldType.INPUT;            //Add buttons      addChild(_loadButton);		  _loadButton.y = 35;		  _loadButton.x = 10;		  		  addChild(_saveButton);		  _saveButton.y = _loadButton.y;		  _saveButton.x = _loadButton.x + _loadButton.width + 10;		  		  addChild(_clearButton);		  _clearButton.y = _saveButton.y;		  _clearButton.x = _saveButton.x + _saveButton.width + 10;		  		  //Button listeners		  _clearButton.addEventListener		    (MouseEvent.CLICK, clearHandler);		  _saveButton.addEventListener		    (MouseEvent.CLICK, saveHandler);		  _loadButton.addEventListener		    (MouseEvent.CLICK, loadHandler);    }    private function loadHandler(event:MouseEvent):void		{		  //Create a FileFilter to prevent the user from		  //opening any file type except XML files		  var fileFilter:FileFilter 		    = new FileFilter("XML Documents", "*.xml;");		    		  //Allow the user to browse for the new file.		  //Pass the fileFilter as an argument      _fileReference.browse([fileFilter]);            //FileReference SELECT listener. This is fired when the      //user selects the correct file		  _fileReference.addEventListener(Event.SELECT, selectHandler);		}   		    private function selectHandler(event:Event):void		{		  trace("File selected");		  		  //Remove the SELECT listener		  _fileReference.removeEventListener(Event.SELECT, selectHandler);       //... Optionally display a loading bar if laoding      //a file from a server         //Add a listener to check whether the file has     //successfully loaded      _fileReference.addEventListener        (Event.COMPLETE, loadCompleteHandler);              //Load the file        _fileReference.load();		}        private function loadCompleteHandler(event:Event):void		{		  //Remove the listener		  _fileReference.removeEventListener        (Event.COMPLETE, loadCompleteHandler);        		  //Store the FileReference's data in the XML object		  var xmlData:XML = XML(_fileReference.data);		  		  //Display the XML object in the text field		  _textField.text = xmlData;		  		  trace("File loaded");	  }	          private function clearHandler(event:MouseEvent):void		{		  _textField.text = "";		} 				private function saveHandler(event:MouseEvent):void		{		  //Create a FileReference object for the save data		  var saveFile:FileReference = new FileReference();		  		  //Add a listener that confirms that the file has		  //been saved       saveFile.addEventListener        (Event.COMPLETE, saveCompleteHandler);            //Create a new temporary XML object to store the      //changed data in the text field        var newXML:XML = XML(_textField.text);            //Save the changed XML data with the name "newMap.xml"      saveFile.save(newXML, "newMap.xml");            trace("File saved");		}  				private function saveCompleteHandler(event:Event):void		{		  trace("Save completed");	  }       }}