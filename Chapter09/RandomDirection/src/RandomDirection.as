package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import flash.geom.Rectangle;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.primitives.*;  [SWF(width="832", height="768",   backgroundColor="#FFFFFF", frameRate="60")]  	public class RandomDirection extends Sprite	{	  private const MAX_TILE_SIZE:uint = 64;	  private const MAP_COLUMNS:uint = 13;	  private const MAP_ROWS:uint = 12;	  	  //tile ID numbers in tile sheet	  private const WALL:uint = 00;	  private const FLOOR:uint = 10;	  private const FAIRY:uint = 01;	  private const MONSTER:uint = 11;	 	  private var _mazeMap:Array	    = [	        [00,00,00,00,00,00,00,00,00,00,00,00,00],	        [00,10,10,10,10,10,10,10,10,00,00,10,00],	        [00,10,00,10,00,00,10,00,10,10,10,10,00],	        [00,10,00,10,10,00,10,00,00,00,10,00,00],	        [00,10,10,10,10,10,10,10,10,10,10,10,00],	        [00,10,00,10,00,10,00,10,00,10,00,10,00],	        [00,10,10,10,00,10,00,00,00,10,00,10,00],	        [00,10,00,00,00,10,10,10,10,10,00,10,00],	        [00,10,10,10,10,10,00,00,10,00,00,10,00],	        [00,10,00,10,00,10,10,00,10,10,10,10,00],	        [00,10,10,10,00,00,10,10,10,00,10,10,00],	        [00,00,00,00,00,00,00,00,00,00,00,00,00]	      ];    	   	   private var _gameObjectMap:Array	    = [	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,01,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,11,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],	        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]	      ];	        	  //Create blank BitmapData objects as the canvas for the game    private var _backgroundBitmapData:BitmapData       = new BitmapData(stage.stageWidth, stage.stageHeight, true, 0);    private var _backgroundBitmap:Bitmap       = new Bitmap(_backgroundBitmapData);    private var _foregroundBitmapData:BitmapData       = new BitmapData(stage.stageWidth, stage.stageHeight, true, 0);    private var _foregroundBitmap:Bitmap       = new Bitmap(_foregroundBitmapData);  	  	//Tile sheet		[Embed(source="../../images/mazeTileSheet.png")]    private var TileSheet:Class;		private var _tileSheetImage:DisplayObject = new TileSheet();		private var _tileSheetBitmapData:BitmapData 		  = new BitmapData			  (			    _tileSheetImage.width, 			    _tileSheetImage.height, 			    true, 			    0			  );        //Create a TileModel to represent the fairy    private var _fairyModel:TileModel;    private var _UIMazeController:UIMazeController;    private var _UIMazeView:UIMazeView         //Create a TileModel to represent the monster    private var _monsterModel:TileModel;        //Status box  	private var _statusBox:StatusBox = new StatusBox;				public function RandomDirection():void		{  		  //Draw the tile sheet			_tileSheetBitmapData.draw(_tileSheetImage);					  //Add the game bitmaps			addChild(_backgroundBitmap);			addChild(_foregroundBitmap);						//Add the status box			addChild(_statusBox);						//Run the buildMap method to convert the			//map array data into a visual display			buildMap(_mazeMap);			buildMap(_gameObjectMap);						addEventListener			  (Event.ENTER_FRAME, enterFrameHandler);		}		private function enterFrameHandler(event:Event):void		{ 		  //1. UPDATE THE MODELS		  		  _fairyModel.update();		  _monsterModel.update();		  		  //2. CHECK FOR COLLISIONS		  		  //Check whether the monster is at the corner of		  //a tile and at an intersection		  if(atCornerOfTile(_monsterModel)		  && atIntersection(_monsterModel))		  {		    findNewDirection(_monsterModel);	    }		  		  //Make a decision about which way to move if the		  //fairy's top left x and y position matches the		  //tile's top left x and y position		  if(atCornerOfTile(_fairyModel))		  {		    //Move in a new direction if there is no wall		    if(_fairyModel.direction == "left"  		  && _mazeMap[_fairyModel.mapRow][_fairyModel.mapColumn - 1]     		  == FLOOR)    		{  		    _fairyModel.vx = -8;  		    _fairyModel.vy = 0;  		  }      		  else if(_fairyModel.direction == "right"  		  && _mazeMap[_fairyModel.mapRow][_fairyModel.mapColumn + 1]     		  == FLOOR)    		{  		    _fairyModel.vx = 8;  		    _fairyModel.vy = 0;  		  }    		    		  else if(_fairyModel.direction == "up"  		  && _mazeMap[_fairyModel.mapRow - 1][_fairyModel.mapColumn]     		  == FLOOR)    		{  		    _fairyModel.vx = 0;  		    _fairyModel.vy = -8;  		  }    		    	    else if(_fairyModel.direction == "down"  		  && _mazeMap[_fairyModel.mapRow + 1][_fairyModel.mapColumn]     		  == FLOOR)    		{  		    _fairyModel.vx = 0;  		    _fairyModel.vy = 8;  		  }  		    		  //Stop if there is a wall in the current direction  		  if(_fairyModel.vx > 0  		  && _mazeMap[_fairyModel.mapRow][_fairyModel.mapColumn + 1]     		  == WALL)    		{    		  _fairyModel.vx = 0    		}      		else if(_fairyModel.vx < 0  		  && _mazeMap[_fairyModel.mapRow][_fairyModel.mapColumn - 1]     		  == WALL)    		{    		  _fairyModel.vx = 0    		}      		if(_fairyModel.vy > 0  		  && _mazeMap[_fairyModel.mapRow + 1][_fairyModel.mapColumn]     		  == WALL)    		{    		  _fairyModel.vy = 0    		}      		else if(_fairyModel.vy < 0  		  && _mazeMap[_fairyModel.mapRow - 1][_fairyModel.mapColumn]     		  == WALL)    		{    		  _fairyModel.vy = 0    		}        }      		  //3. BLIT THE OBJECTS		  		  //Clear the foreground		  _foregroundBitmapData.fillRect(_foregroundBitmapData.rect, 0);      		  //Blit the game objects		  drawGameObject(_fairyModel, _foregroundBitmapData);		  drawGameObject(_monsterModel, _foregroundBitmapData);		  		  //Update status box			_statusBox.text = "RANDOM DIRECTION:"; 			_statusBox.text 			  += "\n" + "DIRECTION: " + _monsterModel.direction;  	  }	  //Find out wether a game object is at an intersection		public function findNewDirection(gameObject:TileModel):void		{		  var newDirection:String = "";		  		  //Choose a random number between 1 and 4		  var randomDirection:int = Math.ceil(Math.random() * 4);	    	    //Encourage the monster to choose up or down if	    //it's currently moving left or right	    if(gameObject.direction == "left"	    || gameObject.direction == "right")	    {	      if(randomDirection <= 2)		    {	        newDirection = "up";		    }		    else		    {		      newDirection = "down";		    }       }      //...if the monster is currently moving up or down, make      //it move left or right      else      {        if(randomDirection <= 2)		    {	        newDirection = "left";		    }		    else		    {		      newDirection = "right";		    }       }            //Test the new direction and call this method recursively      //if the direction runs the object into a wall            switch(newDirection)      {        case "left":          if(_mazeMap[gameObject.mapRow][gameObject.mapColumn - 1]         		== FLOOR)        	{        	  gameObject.direction = newDirection;      		  gameObject.vx = -8;      		  gameObject.vy = 0;      		}      		else       		{      		  //If the test hits a wall, assign this direction as      		  //the object's new direction and test again.      		  //(Assigning the new direction prevents the objects      		  //from accidentally getting stuck in cul-de-sacs)      		  gameObject.direction = newDirection;      		  findNewDirection(gameObject);      		}      		break;      	      	case "right":	      	  if(_mazeMap[gameObject.mapRow][gameObject.mapColumn + 1]       		  == FLOOR)      		{      		  gameObject.direction = newDirection;    		    gameObject.vx = 8;    		    gameObject.vy = 0;    		  }    		  else     		  {    		    gameObject.direction = newDirection;      		  findNewDirection(gameObject);      		}      		break;      	      	case "up":	      	  if(_mazeMap[gameObject.mapRow - 1][gameObject.mapColumn]       		  == FLOOR)      		{      		  gameObject.direction = newDirection;    		    gameObject.vx = 0;    		    gameObject.vy = -8;    		  }    		  else    		  {    		    gameObject.direction = newDirection;      		  findNewDirection(gameObject);      		}	      		break;      	      	case "down":      	  if(_mazeMap[gameObject.mapRow + 1][gameObject.mapColumn]       		  == FLOOR)      		{      		  gameObject.direction = newDirection;    		    gameObject.vx = 0;    		    gameObject.vy = 8;    		  }    		  else      		{      		  gameObject.direction = newDirection;      		  findNewDirection(gameObject);      		}      		break;		      }	  }	  //Find out wether a game object is at an intersection		public function atIntersection(gameObject:TileModel):Boolean		{		  var horizontalPassage:Boolean = false;		  var verticalPassage:Boolean = false;		  var objectIsAtIntersection:Boolean = false;		  		  //An intersection is defined in this game as a place		  //where there is at least one horzontal and one		  //vertical passage open		  if(_mazeMap[gameObject.mapRow][gameObject.mapColumn + 1]     		  == FLOOR    	|| _mazeMap[gameObject.mapRow][gameObject.mapColumn - 1]     		  == FLOOR)    	{    	  horizontalPassage = true;    	}    	if(_mazeMap[gameObject.mapRow + 1][gameObject.mapColumn]     		  == FLOOR    	|| _mazeMap[gameObject.mapRow - 1][gameObject.mapColumn]     		  == FLOOR)    	{    	  verticalPassage = true;    	}    	    	//Check whether the object is in a	    //cul-de-sac (wall on 3 sides)	    	//Create a counter variable to count the number of walls    	if(horizontalPassage && verticalPassage)    	{    	  objectIsAtIntersection = true;    	}    	    	//Check whether the object is in a    	//dead end (wall on 3 sides)    	var wallCounter:uint = 0;    	    	//Check the four surrounding tiles for walls    	if(_mazeMap[gameObject.mapRow][gameObject.mapColumn + 1]     		  == WALL)    	{    	  //Add one to the counter if a wall is found    	  wallCounter++;    	}    	if(_mazeMap[gameObject.mapRow][gameObject.mapColumn - 1]     		  == WALL)    	{    	  wallCounter++;    	}	    	if(_mazeMap[gameObject.mapRow + 1][gameObject.mapColumn]     		  == WALL)    	{    	  wallCounter++;    	}	    	if(_mazeMap[gameObject.mapRow - 1][gameObject.mapColumn]     		  == WALL)    	{    	  wallCounter++;    	}	   	      	    	//If there are more than two wall, the object must be in    	//a cul-de-sac. This is also a type of intersection, so the    	//same rules apply.    	if(wallCounter > 2)    	{    	  objectIsAtIntersection = true;    	}    	    	return objectIsAtIntersection; 	  	  }	  	  //Find out wether a game object is precisely 	  //at the top left corner of the tile		public function atCornerOfTile(gameObject:TileModel):Boolean		{		  var objectIsAtCorner:Boolean = false;		  		  var tileCorner_X:uint 		    = gameObject.mapColumn * MAX_TILE_SIZE;		  var tileCorner_Y:uint 		    = gameObject.mapRow * MAX_TILE_SIZE; 		    		  if(uint(gameObject.xPos) == tileCorner_X		  && uint(gameObject.yPos) == tileCorner_Y)		  {		    objectIsAtCorner = true;		  }		  else		  {		    objectIsAtCorner = false;		  }		  		  return objectIsAtCorner;  		}				//Create tile Models and map them to the		//correct positions on the tile sheet		private function buildMap(map:Array):void	  {    for(var mapColumn:int = 0; mapColumn < MAP_COLUMNS; mapColumn++)    {      for(var mapRow:int = 0; mapRow < MAP_ROWS; mapRow++)      {        var currentTile:int = map[mapRow][mapColumn];                if(currentTile > -1)        {          //Find the tile's column and row position          //on the tile sheet          var tileSheetColumn:uint = uint(currentTile / 10);          var tileSheetRow:uint = uint(currentTile % 10);                    switch(currentTile)          {            case FAIRY:              _fairyModel    	          = new TileModel    	          (    	            MAX_TILE_SIZE,    	            tileSheetColumn, tileSheetRow,     	            mapRow, mapColumn,     	            MAX_TILE_SIZE, MAX_TILE_SIZE    	          );   	            	        //Add the UIView and UIController      	        _UIMazeController    	          = new UIMazeController(_fairyModel);  	          _UIMazeView  		          = new UIMazeView  		          (_fairyModel, _UIMazeController, stage);    		            		        //Disable friction  		          _fairyModel.friction = 1;		          		          //Set the intial direction		          _fairyModel.direction = "right";		          		          //Blit the object to the stage    	        drawGameObject(_fairyModel, _foregroundBitmapData);    	        break;                        case MONSTER:              _monsterModel    	          = new TileModel    	          (    	            MAX_TILE_SIZE,    	            tileSheetColumn, tileSheetRow,     	            mapRow, mapColumn,     	            MAX_TILE_SIZE, MAX_TILE_SIZE    	          );     		            		        //Disable friction  		          _monsterModel.friction = 1;		          		          //Set the intial direction		          _monsterModel.direction = "up";		          		          //Blit the object to the stage    	        drawGameObject(_monsterModel, _foregroundBitmapData);    	        break;    	                    case WALL:              var wall:TileModel                 = new TileModel                (                  MAX_TILE_SIZE,  	              tileSheetColumn, tileSheetRow,   	              mapRow, mapColumn,   	              MAX_TILE_SIZE, MAX_TILE_SIZE                );  	          drawGameObject(wall, _backgroundBitmapData);              break;                        case FLOOR:              var floor:TileModel                 = new TileModel                (                  MAX_TILE_SIZE,  	              tileSheetColumn, tileSheetRow,     	            mapRow, mapColumn,     	            MAX_TILE_SIZE, MAX_TILE_SIZE                );  	          drawGameObject(floor, _backgroundBitmapData);              break;           }           }       }     }   }	    //Basic blit method   private function drawGameObject		  (		    tileModel:TileModel, 		    screen:BitmapData		  ):void		{		  var sourceRectangle:Rectangle = new Rectangle  			(  		    tileModel.tileSheetColumn * MAX_TILE_SIZE,   		    tileModel.tileSheetRow * MAX_TILE_SIZE,   			  tileModel.width,   			  tileModel.height  			);					  	  var destinationPoint:Point = new Point      (        tileModel.xPos,         tileModel.yPos      );            screen.copyPixels        (          _tileSheetBitmapData,           sourceRectangle,           destinationPoint,          null, null, true        );	  }	}}