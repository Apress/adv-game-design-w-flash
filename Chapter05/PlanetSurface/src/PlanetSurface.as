package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.lunarLander.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400", backgroundColor="#FFFFFF", frameRate="60")]  	public class PlanetSurface extends Sprite	{		//Create the lander and add its UI controller		private var _lander:LanderModel 		  = new LanderModel(30,30);		private var _landerUIController:LanderUIController 		  = new LanderUIController(_lander);		private var _lander_View:LanderView 		  = new LanderView(_lander);		private var _landerUIView:LanderUIView 		  = new LanderUIView(_lander, _landerUIController, stage);				//Status box		private var _statusBox:StatusBox = new StatusBox;        //Variables needed to display the planet surface    private var _planetSurfaceImage:DisplayObject;		private var _planetSurfaceBitmapData:BitmapData;		private var _planetSurfaceBitmap:Bitmap;				//Embed the image of the planet surface    [Embed(source="../assets/images/planetSurface.png")]    private var PlanetSurfaceImage:Class;				public function PlanetSurface():void		{ 		  //Add the lander to the stage			addChild(_lander_View);			_lander.setX = 250;			_lander.setY = 50;						//Add gravity			_lander.gravity_Vy = 0.1;						//Create a new instance of the PlanetSurfaceImage class			_planetSurfaceImage = new PlanetSurfaceImage();						//Create a BitmapData object to store the image.			_planetSurfaceBitmapData 			  = new BitmapData			  (			    _planetSurfaceImage.width, 			    _planetSurfaceImage.height, 			    true, 			    0			  );			_planetSurfaceBitmapData.draw(_planetSurfaceImage);						//Create and add the planet surface bitmap image			_planetSurfaceBitmap = new Bitmap(_planetSurfaceBitmapData);			addChild(_planetSurfaceBitmap);			_planetSurfaceBitmap.x = 0;			_planetSurfaceBitmap.y = 200;						//Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 						//Update the lander			_lander.update();			StageBoundaries.stopBitmap(_lander, stage); 						var landerBitmap:Object = createBitmap(_lander, _lander_View);						//Check for a collision with the planet surface			var loopCounter:int = 0;		  while (loopCounter++ != 10) 		  {			  if(landerBitmap.bitmapData.hitTest			      (			        new Point(_lander.xPos, _lander.yPos), 			        255, 			        _planetSurfaceBitmap,			        new Point			          (_planetSurfaceBitmap.x, _planetSurfaceBitmap.y),			        255			      )			    )			  {			    //Switch off gravity			 	  _lander.gravity_Vy = 0;			 	  			 	  //Move the lander out of the collision on the y axis			 	  _lander.setY = _lander.yPos - 1;			    _lander.vy = 0;		      			  } 			  else 			  {			    break;			  }		  }		  		  //Switch gravity back on if there is no ground below the lander		  //Adding "+1" to the _lander's y 		  //position is the key to making this work		  if(!landerBitmap.bitmapData.hitTest		      (		        new Point(_lander.xPos, _lander.yPos + 1), 			      255, 			      _planetSurfaceBitmap,			      new Point(_planetSurfaceBitmap.x, _planetSurfaceBitmap.y),			      255			    )			  )			{			  _lander.gravity_Vy = 0.1;		  }		        //Update status box			_statusBox.text = "PLANET SURFACE:";   			_statusBox.text += "\n" + "GRAVITY: " + _lander.gravity_Vy;   		}		private function createBitmap		  (model:AVerletModel, view:AVerletView):Object		{		  //BitmapData(width, height, transparent?, fillColor(0 is alpha))			var bitmapData:BitmapData 			  = new BitmapData(model.width, model.height, true, 0);			bitmapData.draw(view);			var bitmap:Bitmap = new Bitmap(bitmapData);						//Create the object to return to the caller			var bitmapObject:Object = new Object;			bitmapObject.bitmapData = bitmapData;			bitmapObject.bitmap = bitmap;						return bitmapObject;		}	}}