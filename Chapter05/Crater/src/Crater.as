package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.lunarLander.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]  	public class Crater extends Sprite	{			//Create the lander and add its UI controller  		private var _lander:LanderModel   		  = new LanderModel(30,30);  		private var _landerUIController:LanderUIController   		  = new LanderUIController(_lander);  		private var _lander_View:LanderView   		  = new LanderView(_lander);  		private var _landerUIView:LanderUIView   		  = new LanderUIView(_lander, _landerUIController, stage);  		  		//Status box  		private var _statusBox:StatusBox = new StatusBox;      			//Distance vector			private var _v0:VectorModel = new VectorModel();			private var _v0_View:VectorView = new VectorView(_v0);						//Variables required to display the crater image			private var _craterImage:DisplayObject;			private var _craterBitmapData:BitmapData;			private var _craterBitmap:Bitmap;						//Embed the image of the crater      [Embed(source="../assets/images/crater.png")]      private var CraterImage:Class;				public function Crater():void		{ 		  //Add the lander to the stage			addChild(_lander_View);			_lander.setX = 275;			_lander.setY = 50;						//Add vector view			addChild(_v0_View);						//Add gravity			_lander.gravity_Vy = 0.1;						//Create a new instance of the CraterImage class			_craterImage = new CraterImage();						//Create a BitmapData object to store the image			_craterBitmapData 			  = new BitmapData			  (_craterImage.width, _craterImage.height, true, 0);			  			_craterBitmapData.draw(_craterImage);						//Create and add the crater bitmap image			_craterBitmap = new Bitmap(_craterBitmapData);			addChild(_craterBitmap);			_craterBitmap.x = 0;			_craterBitmap.y = 0;						//Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 						//Update the lander			_lander.update();			StageBoundaries.wrapBitmap(_lander, stage); 						_v0.update			  (			    _lander.xPos + _lander.width * 0.5, 			    _lander.yPos + _lander.height * 0.5, 			    _craterBitmap.x + _craterBitmap.width * 0.5, 			    _craterBitmap.y + _craterBitmap.height * 0.5			  );						var landerBitmap:Object = createBitmap(_lander, _lander_View);						var loopCounter:int = 0;		  while (loopCounter++ != 10) 		  {			  if(landerBitmap.bitmapData.hitTest			      (			        new Point(_lander.xPos, _lander.yPos), 			        255, 			        _craterBitmap,			        new Point(_craterBitmap.x, _craterBitmap.y),			        255			      )			    )			  {			    //Switch off gravity			 	  _lander.gravity_Vy = 0;			 	  			 	  //Move the lander out of the collision in the direction			 	  //of the distance vector.			 	  _lander.setX = _lander.xPos + _v0.dx;			    _lander.setY = _lander.yPos + _v0.dy;			    _lander.vx = 0;			    _lander.vy = 0;		      			  } 			  else 			  {			    break;			  }		  }		  		  //Switch gravity back on if there is no ground below the lander		  //Adding "+1" to the _lander's y position 		  //is the key to making this work		  if(!landerBitmap.bitmapData.hitTest		      (		        new Point(_lander.xPos, _lander.yPos + 1), 			      255, 			      _craterBitmap,			      new Point(_craterBitmap.x, _craterBitmap.y),			      255			    )			  )			{			  _lander.gravity_Vy = 0.1;		  }		        //Update status box			_statusBox.text = "CRATER:";   			_statusBox.text += "\n" + "GRAVITY: " + _lander.gravity_Vy;   		}		private function createBitmap		  (model:AVerletModel, view:AVerletView):Object		{		  //BitmapData(width, height, transparent?, fillColor(0 is alpha))			var bitmapData:BitmapData 			  = new BitmapData(model.width, model.height, true, 0);			bitmapData.draw(view);			var bitmap:Bitmap = new Bitmap(bitmapData);						//Create the star object to return to the caller			var bitmapObject:Object = new Object;			bitmapObject.bitmapData = bitmapData;			bitmapObject.bitmap = bitmap;						return bitmapObject;		}	}}