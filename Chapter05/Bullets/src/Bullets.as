package{	import flash.events.Event;  import flash.display.Sprite;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.lunarLander.*;  import com.friendsofed.gameElements.turret.*;  import com.friendsofed.gameElements.primitives.*;  [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]  	public class Bullets extends Sprite	{			//Create the lander and add its UI controller  		private var _lander:LanderModel   		  = new LanderModel(30,30);  		private var _landerUIController:LanderUIController   		  = new LanderUIController(_lander);  		private var _lander_View:LanderView = new LanderView(_lander);  		private var _landerUIView:LanderUIView   		  = new LanderUIView(_lander, _landerUIController, stage);  		  		//Create the lander's turret and add its UI controller  		private var _turret:TurretModel   		  = new TurretModel(15, 3, 0x000000, -20, -160);  		private var _turretUIController:TurretUIController   		  = new TurretUIController(_turret);  		private var _turret_View:TurretView = new TurretView(_turret);  		private var _turretUIView:TurretUIView   		  = new TurretUIView(_turret, _turretUIController, stage);  		  		//Array to store the bullet model and views  		private var _bulletModels:Array = [];  		private var _bulletViews:Array = [];  		  		//Status box  		private var _statusBox:StatusBox = new StatusBox;				public function Bullets():void		{ 		  //Add the lander to the stage			addChild(_lander_View);			_lander.setX = 250;			_lander.setY = 200;						//Add gravity			_lander.gravity_Vy = 0.1;						//Add the turret to the stage			addChild(_turret_View);						//Set the turret to the lander's position			_turret.setX = _lander.xPos + _lander.width * 0.5;			_turret.setY = _lander.yPos + 2;						//Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 			//Update the lander and turret			_lander.update();						StageBoundaries.stopBitmap(_lander, stage);  						//Set the turret to the lander's position			_turret.setX = _lander.xPos + _lander.width * 0.5;			_turret.setY = _lander.yPos + 2;  						//Fire bullets			if(_turret.fireBullet == true)			{			  //Create the bulllet model and push it 			  //into the _bulletModels array        var bulletModel:CircleModel = new CircleModel(2);        _bulletModels.push(bulletModel);                    //Position the bullet model at the end of the turret         //and give it an initial velocity        bulletModel.setX           = _turret.xPos - _turret.width * Math.cos(_turret.angle);        bulletModel.setY           = _turret.yPos - _turret.width * Math.sin(_turret.angle);        bulletModel.vx = Math.cos(_turret.angle) * -10;        bulletModel.vy = Math.sin(_turret.angle) * -10;        bulletModel.friction = 1;                  //Add the bullet view and push it into the _bulletViews array         var bulletView:CircleBlockView           = new CircleBlockView(bulletModel);        addChild(bulletView);        _bulletViews.push(bulletView);                  //Reset the turret so that it can fire again  			  _turret.fireBullet = false;			}						//Loop through all the bullets			for(var i:int = 0; i < _bulletModels.length; i++)      {        //Update the bullet Model        _bulletModels[i].update();                //Remove the bullet if it crosses the stage boundary				if(_bulletModels[i].yPos < 0				|| _bulletModels[i].yPos > stage.stageHeight				|| _bulletModels[i].xPos < 0				|| _bulletModels[i].xPos > stage.stageWidth)				{					_bulletModels.splice(i, 1);					removeChild(_bulletViews[i]);					_bulletViews.splice(i, 1);					i--;				}      }            //Update status box			_statusBox.text = "BULLETS:";   			_statusBox.text 			  += "\n" + "BULLETS ON STAGE: " + _bulletModels.length; 		}	}}