package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.lunarLander.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]  	public class Cave extends Sprite	{			//Create the lander and add its UI controller  		private var _lander:LanderModel   		  = new LanderModel(30,30);  		private var _landerUIController:LanderUIController   		  = new LanderUIController(_lander);  		private var _lander_View:LanderView   		  = new LanderView(_lander);  		private var _landerUIView:LanderUIView   		  = new LanderUIView(_lander, _landerUIController, stage);  		  		//Status box  		private var _statusBox:StatusBox = new StatusBox;  		  		//The side that the collision is occuring on			private var _collisionSide:String = "";						//Variables to display the cave			private var _caveImage:DisplayObject;			private var _caveBitmapData:BitmapData;			private var _caveBitmap:Bitmap;						//Embed the image of the cave      [Embed(source="../assets/images/cave.png")]      private var CaveImage:Class;				public function Cave():void		{ 		  //Add the lander to the stage			addChild(_lander_View);			_lander.setX = 70;			_lander.setY = 50;						//Add gravity			_lander.gravity_Vy = 0.1;						//Create a new instance of the CaveImage class			_caveImage = new CaveImage();						//Create a BitmapData object to store the image			_caveBitmapData 			  = new BitmapData			  (_caveImage.width, _caveImage.height, true, 0);			  			_caveBitmapData.draw(_caveImage);						//Create and add the cave bitmap image			_caveBitmap = new Bitmap(_caveBitmapData);			addChild(_caveBitmap);			_caveBitmap.x = 0;			_caveBitmap.y = 0;						//Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 						//Update the lander			_lander.update();			StageBoundaries.wrapBitmap(_lander, stage); 						var landerBitmap:Object = createBitmap(_lander, _lander_View);						//Check for a collision between the Lander and the cave			var loopCounter:int = 0;		  while (loopCounter++ != 10) 		  {			  if(landerBitmap.bitmapData.hitTest			      (			        new Point(_lander.xPos, _lander.yPos), 			        255, 			        _caveBitmap,			        new Point(_caveBitmap.x, _caveBitmap.y),			        255			      )			    )			  { 			    //A collision was found.	        //Next the code creates "collision boxes" on all     	    //four sides of the Lander to    	    //find out on which side the collision is occuring    	    			    //Switch off gravity			 	  _lander.gravity_Vy = 0;			    			    //1. Check for a collision on the bottom			    if(landerBitmap.bitmapData.hitTest			        (			          new Point(_lander.xPos, _lander.yPos + 10), 			          255, 			          _caveBitmap,			          new Point(_caveBitmap.x, _caveBitmap.y),			          255			        )			      )			    {			      //Move the lander out of the collision			      _lander.setY = _lander.yPos - 1;			      _lander.vy = 0;			      _collisionSide = "bottom";			    }			    			    //2. Check for a collision on the top			    else if			      (landerBitmap.bitmapData.hitTest			        (			          new Point(_lander.xPos, _lander.yPos - 10), 			          255, 			          _caveBitmap,			          new Point(_caveBitmap.x, _caveBitmap.y),			          255			        )			      )			    {			      //Move the lander out of the collision			      _lander.setY = _lander.yPos + 1;			      _lander.vy = 0;			      _collisionSide = "top";			    } 			    			    //3. Check for a collision on the right			    if(landerBitmap.bitmapData.hitTest			        (			          new Point(_lander.xPos + 10, _lander.yPos), 			          255, 			          _caveBitmap,			          new Point(_caveBitmap.x, _caveBitmap.y),			          255			        )			      )			    {			      //Move the lander out of the collision			      _lander.setX = _lander.xPos - 1;			      _lander.vx = 0;			      _collisionSide = "right";			    }			    			    //4. Check for a collision on the left 			    else if			      (landerBitmap.bitmapData.hitTest			        (			          new Point(_lander.xPos - 10, _lander.yPos), 			          255, 			          _caveBitmap,			          new Point(_caveBitmap.x, _caveBitmap.y),			          255			        )			      )			    {			      //Collision on left			      _lander.setX = _lander.xPos + 1;			      _lander.vx = 0;			      _collisionSide = "left";			    }                      			  } 			  else 			  {			    break;			  }		  }		  //Switch gravity back on if there is no ground below the lander		  //Adding "+1" to the lander's y position in the collision		  //test is the key to making this work		  if(!landerBitmap.bitmapData.hitTest		      (		        new Point(_lander.xPos, _lander.yPos + 1), 			      255, 			      _caveBitmap,			      new Point(_caveBitmap.x, _caveBitmap.y),			      255			    )			  )			{			  _lander.gravity_Vy = 0.1;		  }		        //Update status box			_statusBox.text = "CAVE:";   			_statusBox.text += "\n" + "GRAVITY: " + _lander.gravity_Vy;  			_statusBox.text += "\n" + "COLLISION SIDE: " + _collisionSide;  		}		private function createBitmap		  (model:AVerletModel, view:AVerletView):Object		{		  //BitmapData(width, height, transparent?, fillColor(0 is alpha))			var bitmapData:BitmapData 			  = new BitmapData(model.width, model.height, true, 0);			bitmapData.draw(view);			var bitmap:Bitmap = new Bitmap(bitmapData);						//Create the star object to return to the caller			var bitmapObject:Object = new Object;			bitmapObject.bitmapData = bitmapData;			bitmapObject.bitmap = bitmap;						return bitmapObject;		}	}}