package{	import flash.events.Event;  import flash.display.Sprite;  import flash.display.Shape;  import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Matrix;	import flash.geom.Point;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]  	public class SafeBlockMovement extends Sprite	{			//Star 1 (player's star)  		private var _s1:Object = makeStar();  		  		//Star 2  	  private var _s2:Object = makeStar();  	    	  //Status box  		private var _statusBox:StatusBox = new StatusBox;  				public function SafeBlockMovement():void		{ 		  //Star 1		  addChild(_s1.bitmap);						//Star 2			addChild(_s2.bitmap);			_s2.bitmap.x = 175;			_s2.bitmap.y = 100;		  		  //Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 			_s1.bitmap.x = stage.mouseX - 100;			_s1.bitmap.y = stage.mouseY - 100;						//Distance vector between the stars			var v0:VectorModel 			  = new VectorModel			  (			    _s1.bitmap.x, 			    _s1.bitmap.y, 			    _s2.bitmap.x, 			    _s2.bitmap.y			  ); 						  //Use a while loop to figure out if the stars are touching,		  //but limit the number of times the loop runs by		  //using a counter variable and incrementing it by "1" each loop		  		  var loopCounter:int = 0;      while (loopCounter++ != 200)       {        //The if statement inside the while loop        //checks for a collision			  if  			  (  			    _s1.bitmapData.hitTest  			      (  			        new Point(_s1.bitmap.x, _s1.bitmap.y),   			        255,   			        _s2.bitmap,  			        new Point(_s2.bitmap.x, _s2.bitmap.y),  			        255  			      )  			    )  			{  			  //Separate _s1 by 1 unit vector until   			  //it is no longer touching _s2  			  _s1.bitmap.x -= v0.dx;  			  _s1.bitmap.y -= v0.dy;  			}		  }						//Update status box			_statusBox.text = "SAFE BLOCK MOVEMENT";		}				private function makeStar():Object		{ 		  //Create a new Vector object for the drawing coordinates			var starCoordinates:Vector.<Number> = new Vector.<Number>();						//Push the coordinates into the starCoordinates Vector			starCoordinates.push			  (			    0,0, 100,60, 200,0, 140,100, 			    200,200, 100,120, 0,200, 60,100, 0,0			  );						//Create a Vector object for the drawing commands			var starCommands:Vector.<int> = new Vector.<int>(); 						//1 = moveTo(), 2 = lineTo(), 3 = curveTo()			starCommands.push(1,2,2,2,2,2,2,2,2);						//Create the starShape object and draw it.			var starShape:Shape = new Shape();			starShape.graphics.lineStyle();			starShape.graphics.beginFill(0x666666);						//Use the drawPath command to draw the 			//shape using the starCommands and starCoordinates Vectors			starShape.graphics.drawPath(starCommands, starCoordinates);			starShape.graphics.endFill();						//BitmapData(width, height, transparent?, fillColor(0 is alpha))			var starBitmapData:BitmapData 			  = new BitmapData(200, 200, true, 0);			starBitmapData.draw(starShape);			var starBitmap:Bitmap = new Bitmap(starBitmapData);						//Create the star object to return to the caller			var star:Object = new Object;			star.bitmapData = starBitmapData;			star.bitmap = starBitmap;			star.shape = starShape;						return star;	  }	}}