package{	import flash.events.Event;  import flash.display.*;  import flash.geom.Point;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.lunarLander.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400", backgroundColor="#FFFFFF", frameRate="60")]  	public class LunarLander extends Sprite	{			//Create the lander and add its UI controller  		private var _lander:LanderModel = new LanderModel(30,30);  		private var _landerUIController:LanderUIController = new LanderUIController(_lander);  		private var _lander_View:LanderView = new LanderView(_lander);  		private var _landerUIView:LanderUIView = new LanderUIView(_lander, _landerUIController, stage);  		  		//Create bitmapData for the lander  		private var _landerBitmapData:BitmapData = new BitmapData(_lander.width, _lander.height, true, 0);  		  		private var _collision:Boolean = false;  		  		//Status box  		private var _statusBox:StatusBox = new StatusBox;            private var asteroidImage:DisplayObject;		  			private var asteroidBitmapData:BitmapData;						private var _v0:VectorModel = new VectorModel();			private var _v0_View:VectorView = new VectorView(_v0);						//5. Declate the Bitmap object that will hold the image of the cave			private var asteroidBitmap:Bitmap;						//1. Embed the image of the cave. Use a relative path.      //Create a class to store the image      [Embed(source="../assets/images/asteroid.png")]      private var CaveImage:Class;				public function LunarLander():void		{ 		  //Add the lander to the stage			addChild(_lander_View);			_lander.setX = 250;			_lander.setY = 50;						//Add vector view			addChild(_v0_View);						//Add gravity			_lander.gravity_Vy = 0.1;						//2. Create a new instance of the CaveImage class			asteroidImage = new CaveImage();						//3. Create a BitmapData object to store the image.			//You must include "true" and "0" in the constructor for 			//the PNG's transparency 			asteroidBitmapData = new BitmapData(asteroidImage.width, asteroidImage.height, true, 0);			asteroidBitmapData.draw(asteroidImage);						//6. Create and add the cave bitmap image			asteroidBitmap = new Bitmap(asteroidBitmapData);			addChild(asteroidBitmap);			asteroidBitmap.x = 200;			asteroidBitmap.y = 100						//Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 						//Update the lander			_lander.update();			StageBoundaries.stop(_lander, stage); 						//Draw the lander's View onto its bitmapData			_landerBitmapData.draw(_lander_View); 						//The lander's motion vector			var v1:VectorModel = new VectorModel(_lander.xPos, _lander.yPos, _lander.xPos + _lander.vx, _lander.yPos + _lander.vy);						_v0.update(_lander.xPos + _lander.width / 2, 			           _lander.yPos + _lander.height / 2, 			           asteroidBitmap.x + asteroidBitmap.width / 2, 			           asteroidBitmap.y + asteroidBitmap.height / 2);						var landerBitmap:Object = createBitmap(_lander, _lander_View, true);						var loopCounter:int = 0;		  while (loopCounter++ != 10) 		  {			  if(landerBitmap.bitmapData.hitTest(new Point(_lander.xPos, _lander.yPos), 			                          255, 			                          asteroidBitmap,			                          new Point(asteroidBitmap.x, asteroidBitmap.y),			                          255))			  {			    //Switch off gravity			 	  _lander.gravity_Vy = 0;			 	  			 	  //Move the lander out of the collision in the direction			 	  //of the distance vector.			 	  _lander.setX = _lander.xPos - _v0.dx;			    _lander.setY = _lander.yPos - _v0.dy;			    _lander.vx = 0;			    _lander.vy = 0;		      			  } 			  else 			  {			    break;			  }		  }		  		  //Switch gravity back on if there is no ground below the lander		  if(!landerBitmap.bitmapData.hitTest(new Point(_lander.xPos, _lander.yPos + 1), 			                                    255, 			                                    asteroidBitmap,			                                    new Point(asteroidBitmap.x, asteroidBitmap.y),			                                    255))			{			  _lander.gravity_Vy = 0.1;		  }		        //Update status box			_statusBox.text = "ASTEROID:";   			_statusBox.text += "\n" + "GRAVITY: " + _lander.gravity_Vy;   		}		private function createBitmap(model:AVerletModel, view:AVerletView, alphaTransparency:Boolean):Object		{		  //BitmapData(width, height, transparent?, fillColor(0 is alpha))			var bitmapData:BitmapData = new BitmapData(model.width, model.height, alphaTransparency, 0);			bitmapData.draw(view);			var bitmap:Bitmap = new Bitmap(bitmapData);						//Create the star object to return to the caller			var bitmapObject:Object = new Object;			bitmapObject.bitmapData = bitmapData;			bitmapObject.bitmap = bitmap;						return bitmapObject;		}	}}