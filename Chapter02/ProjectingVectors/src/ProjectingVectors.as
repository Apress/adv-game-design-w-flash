package{	import flash.events.Event;  import flash.display.Sprite;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.spaceShip.*;  import com.friendsofed.vector.*;    [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]	public class ProjectingVectors extends Sprite	{		//Space ship		private var _shipModel:ShipModel 		  = new ShipModel();		private var _shipController:ShipController 		  = new ShipController(_shipModel);		private var _shipView:ShipView 		  = new ShipView(_shipModel, _shipController);				//Drag handles		private var _handle1:DragHandle = new DragHandle();		private var _handle2:DragHandle = new DragHandle();				//We need 3 vectors:		//A. Vector between _handle1 and the ship		private var _v1:VectorModel = new VectorModel();		private var _v1View:VectorView = new VectorView(_v1, "basic", 1);				//B. Vector for the drag handles 		//(there is no view for this vector)		private var _v2:VectorModel = new VectorModel();		private var _v2View:VectorView = new VectorView(_v2, "basic", 1);				//C. The new vector: _v1 projected onto _v2		private var _v3:VectorModel 		  = new VectorModel();		private var _v3View:VectorView 		  = new VectorView(_v3, "detailed", 1);				//Status box to display the result of the projection		private var _statusBox:StatusBox;				public function ProjectingVectors():void		{			//Add the drag handles to the stage		  addChild(_handle1);		  _handle1.x = 200;		  _handle1.y = 200;		  		  addChild(_handle2);		  _handle2.x = 100;		  _handle2.y = 100;		  		  //Add the space ship			addChild(_shipView);			_shipModel.setX = 275;			_shipModel.setY = 200;						//Add the v1View			addChild(_v1View);						//Add the projected vector view, _v3			addChild(_v3View);						//Add the v2 View			//addChild(_v2View);						//Add the status box			_statusBox = new StatusBox();			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{		  //Update the ship model			_shipModel.update();			StageBoundaries.wrap(_shipModel, stage);						//Update the vector between _handle1 and the ship		  _v1.update		    (_handle1.x, _handle1.y, _shipModel.xPos, _shipModel.yPos);					  //Update the drag handle vector		  _v2.update		    (_handle1.x, _handle1.y, _handle2.x, _handle2.y);		  		  //Find the dot product		  var dotProduct:Number = VectorMath.dotProduct(_v1, _v2);		  		  //Find the vx and vy of the new projected vector		  var projection_Vx:Number = dotProduct * _v2.dx;			var projection_Vy:Number = dotProduct * _v2.dy;						//Project the new vector onto _v2's 			//coordinate system			_v3.update			  (			    _handle1.x, 			    _handle1.y, 			    (_handle1.x + projection_Vx), 			    (_handle1.y + projection_Vy)			  );			      //4. Display the result in a status box      			_statusBox.text = "VECTOR PROJECTION:";			_statusBox.text 			  += "\n" + "DOT PRODUCT: " + Math.round(dotProduct);			_statusBox.text 			  += "\n" + "V2 DX: " + Math.round(_v2.dx * 1000) / 1000;			_statusBox.text 			  += "\n" + "V2 DY: " + Math.round(_v2.dy * 1000) / 1000;			_statusBox.text 			  += "\n" + "PROJECTED VX: " + Math.round(projection_Vx);			_statusBox.text 			  += "\n" + "PROJECTED VY: " + Math.round(projection_Vy);		}	}}