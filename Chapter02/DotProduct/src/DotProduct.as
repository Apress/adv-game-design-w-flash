package{	import flash.events.Event;  import flash.display.Sprite;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.spaceShip.*;  import com.friendsofed.vector.*;    [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]	public class DotProduct extends Sprite	{	  //space ship		private var _shipModel:ShipModel 		  = new ShipModel();		private var _shipController:ShipController 		  = new ShipController(_shipModel);				//Because the ship's motion vector is very small, 		//it's scaled to "10"		private var _shipView:ShipView 		  = new ShipView(_shipModel, _shipController);				//Vector for the ship's motion		private var _v1:VectorModel 		  = new VectorModel();		private var _v1View:VectorView 		  = new VectorView(_v1, "basic", 10);				//Drag handles		private var _handle1:DragHandle = new DragHandle();;		private var _handle2:DragHandle = new DragHandle();;				//Vector for the drag handles		private var _v2:VectorModel 		  = new VectorModel();		private var _v2View:VectorView 		  = new VectorView(_v2, "detailed", 1);				//Status box to display the result of the dot product		private var _statusBox:StatusBox = new StatusBox();				public function DotProduct()		{		  //Add the space ship			addChild(_shipView);			_shipModel.setX = 275;			_shipModel.setY = 200;						//Add the view that displays the ship's motion vector			addChild(_v1View);		  		  //Add the drag handles to the stage		  addChild(_handle1);		  _handle1.x = 200;		  _handle1.y = 175;		  		  addChild(_handle2);		  _handle2.x = 100;		  _handle2.y = 100;		  		  //Add the view that displays the vector between the handles			addChild(_v2View);						//Add the status box that displays the dot product			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME,enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{		  //Update the ship model			_shipModel.update();			StageBoundaries.wrap(_shipModel, stage);						//Update the ship's motion vector model		  _v1.update		    (		      _shipModel.xPos, 		      _shipModel.yPos, 		      (_shipModel.xPos + _shipModel.vx), 		      (_shipModel.yPos + _shipModel.vy)		    );						//Update the drag handle vector model		  _v2.update(_handle1.x, _handle1.y, _handle2.x, _handle2.y);		  		  //Find the Dot Product, a number which tells you whether 			//the vectors are pointing in the same direction.			//This uses the custom VectorMath class in the 			//com.friendsofed.vector package			var dotProduct:Number = VectorMath.dotProduct(_v1, _v2);						//The line above returns the same as writing this:			//var dotProduct:Number = _v1.vx * _v2.dx + _v1.vy * _v2.dy;				  //Display the result in a status box      _statusBox.text = "DOT PRODUCT: " + dotProduct;      if(dotProduct > 0)      {        _statusBox.text += "\n" + "Same direction";      }      else      {        _statusBox.text += "\n" + "Opposite directions";      }                          		}	}}