package{	import flash.events.Event;	import flash.display.Sprite;	import com.friendsofed.utils.*;	import com.friendsofed.gameElements.spaceShip.*;	import com.friendsofed.vector.*;	import planet.Planet;		[SWF(backgroundColor="0xFFFFFF", frameRate="60",   width="550", height="400")]	public class AddingVectors extends Sprite	{		private var _shipModel:ShipModel 		  = new ShipModel();		private var _shipController:ShipController 		  = new ShipController(_shipModel);		private var _shipView:ShipView 		  = new ShipView(_shipModel, _shipController);				//Ship-to-planet vector		private var _v1:VectorModel = new VectorModel();		private var _v1View:VectorView = new VectorView(_v1, "status", 1);				//Gravity vector		private var _gravityVector:VectorModel 		  = new VectorModel();		private var _gravityVectorView:VectorView 		  = new VectorView(_gravityVector, "status", 1);				//Planet		private var _planet:Planet = new Planet(100, 0x999999, 280);				public function AddingVectors()		{		  //Add the planet			addChild(_planet);      _planet.x = stage.stageWidth / 2;			_planet.y = stage.stageHeight / 2;						//Add the ship			addChild(_shipView);			_shipModel.setX = 100;			_shipModel.setY = 200;						//Add the vector views			addChild(_v1View);			addChild(_gravityVectorView);			_gravityVectorView.x = 440;						//Set ship's friction to 1 for realistic oribiting effect			_shipModel.frictionConstant = 1; 						addEventListener(Event.ENTER_FRAME,enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{		  //Update the ship model			_shipModel.update();			StageBoundaries.wrap(_shipModel, stage);						//Update the ship-to-planet vector model			_v1.update			  (			    _shipModel.xPos, 			    _shipModel.yPos, 			    _planet.x, 			    _planet.y			  );						//Calculate gravity			//Use the normalized vector to create a new 			//vector with a new length.			//This new vector will be the "force of gravity" 			//that we can add to the ship's existing vx and vy vector			var gravity_Vx:Number = _v1.dx * 0.1;  	  var gravity_Vy:Number = _v1.dy * 0.1;  	    	  //Proportional gravity based on distance  	  /*  	  var planetMass:Number = 5;  	  var shipMass:Number = 1;  	  var gravity_Vx:Number   	    = _v1.dx * (planetMass * shipMass) / _v1.m;  	  var gravity_Vy:Number   	    = _v1.dy * (planetMass * shipMass) / _v1.m;			*/						//Update the gravity vector model			_gravityVector.update(0,0,0,0, gravity_Vx, gravity_Vy);						 //Trace the gravity vector’s magnitude to check its size			trace(_gravityVector.m);			  	  //Add gravity to the ship's velocity		  _shipModel.vx += _gravityVector.vx;		  _shipModel.vy += _gravityVector.vy;		}	}}