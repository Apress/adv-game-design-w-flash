package{	import flash.events.Event;  import flash.display.Sprite;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.spaceShip.*;  import com.friendsofed.vector.*;	public class LimitingIntersection extends Sprite	{			//Space ship  		private var _shipModel:ShipModel   		  = new ShipModel();  		private var _shipController:ShipController   		  = new ShipController(_shipModel);  		private var _shipView:ShipView   		  = new ShipView(_shipModel, _shipController);  		//Drag handles  		private var _handle1:DragHandle = new DragHandle();  		private var _handle2:DragHandle = new DragHandle();  		//We need 3 vectors:  		//A. The ship's movement vector  		private var _v1:VectorModel   		  = new VectorModel();  		private var _v1View:VectorView   		  = new VectorView(_v1, "basic", 10);  		//B. Vector for the drag handles  		private var _v2:VectorModel   		  = new VectorModel();  		private var _v2View:VectorView   		  = new VectorView(_v2, "basic", 1);  		//C. Vector between the first drag handle and the ship  		private var _v3:VectorModel = new VectorModel();  		//Status box to display the result of the projection  		private var _statusBox:StatusBox;  		  		//An intersection mark to   		//indicate where the intersection happens  		private var _mark:IntersectionMark = new IntersectionMark();				public function LimitingIntersection():void		{			//Add the drag handles to the stage		  addChild(_handle1);		  _handle1.x = 100;		  _handle1.y = 100;		  		  addChild(_handle2);		  _handle2.x = 100;		  _handle2.y = 300;		  		  //Add the space ship			addChild(_shipView);			_shipModel.setX = 275;			_shipModel.setY = 200;		  		  //Add vector views			addChild(_v2View);			addChild(_v1View);						//Add the status box that displays the dot product			_statusBox = new StatusBox();			addChild(_statusBox);						//Add the intersection mark		  addChild(_mark);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{			//Update the ship model			_shipModel.update();			StageBoundaries.wrap(_shipModel, stage);						//v1: the ship's movement vector			_v1.update			  (			    _shipModel.xPos, _shipModel.yPos, 			    (_shipModel.xPos + _shipModel.vx), 			    (_shipModel.yPos + _shipModel.vy)			  );					  //v2: the drag handle vector      _v2.update(_handle1.x, _handle1.y, _handle2.x, _handle2.y);                       						//v3: the vector between v1 and v2			//This is the helper vector needed to 			//calculate the intersection point		  _v3.update		    (_shipModel.xPos, _shipModel.yPos, _handle1.x, _handle1.y);		   			//Find the ratio of the perp-dot product 			//between v3 and v2 and of v1 and v2						var t:Number 			  = VectorMath.perpProduct(_v3, _v2) / VectorMath.perpProduct(_v1, _v2);                                			              			//Use the ratio to find the intersection point's coordinates              			var intersection_X:Number = _v1.a.x + _v1.vx * t;			var intersection_Y:Number = _v1.a.y + _v1.vy * t;						//Find out if the intersection point is 			//within the length of the vector			//Create a fourth vector between the start 			//point of vector 2 and the intersection point   		var v4:VectorModel    		  = new VectorModel   		  (_v2.a.x, _v2.a.y, intersection_X, intersection_Y);   			    		//Create a fifth vector between the    		//end point of vector 2 and the intersection point    	var v5:VectorModel     	  = new VectorModel    	  (_v2.b.x, _v2.b.y, intersection_X, intersection_Y);   			    		if(v4.m > _v2.m || v5.m > _v2.m)   		{   			//If the interesection point is not within the length of   			//vector two, move it far, far away   			intersection_X = 0;   			intersection_Y = 0;   		 }						//Position the intersection mark on the stage			_mark.x = intersection_X;			_mark.y = intersection_Y;						//Display the result in a status box			_statusBox.text = "INTERSECTION:";			_statusBox.text += "\n" + "RATIO (t): " + Math.round(t);			if(t > 0)			{			  _statusBox.text += "\n" + "INTERSECTION IN: future";			}			else			{			  _statusBox.text += "\n" + "INTERSECTION IN: past";			}			_statusBox.text 			  += "\n" + "INTERSECTION X: " + Math.round(intersection_X);			_statusBox.text 			  += "\n" + "INTERSECTION Y: " + Math.round(intersection_Y);		}	}}