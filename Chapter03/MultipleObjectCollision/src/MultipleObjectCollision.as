package{	import flash.events.Event;  import flash.display.Sprite;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]  	public class MultipleObjectCollision extends Sprite	{			//Circle 1 (player's circle)  		private var player:CircleModel   		  = new CircleModel(20);  		private var _UIController:UIController   		  = new UIController(player);  		private var playerView:CircleView   		  = new CircleView(player);  		private var _UIView:UIView   		  = new UIView(player, _UIController, stage);  		//Status box  		private var _statusBox:StatusBox = new StatusBox;  		  		//Array to store all the models in the game  		private var _models:Array = new Array();  		  		//Array to store all the views in the game  		private var _views:Array = new Array();  		  		//Number of circles on the stage  		private var _numberOfCircles:Number = 10;				public function MultipleObjectCollision():void		{ 			 for(var i:int = 0; i < _numberOfCircles; i++)			 {			   //Create the circle model,			   //give it a random position add it to the models array			   			   //Optional random size			   //var radius:uint = Math.round(Math.random() * 25) + 10;			   var radius:uint = 10;			   var circleModel:CircleModel = new CircleModel(radius);			   circleModel.setX 			     = Math.round(Math.random() * stage.stageWidth);			   circleModel.setY 			     = Math.round(Math.random() * stage.stageHeight);			                      			   //Optional gravity                  			   //circleModel.gravity_Vy = 0.1;			   			   _models.push(circleModel);			   			   //Create the circle view			   //add it to the views array and add it to the stage         var circleView:CircleView = new CircleView(circleModel);         _views.push(circleView);           addChild(circleView);			}					  //Add the player's circle		  _models.push(player);		  player.setX = 275;		  player.setY = 200;		  _views.push(playerView);		  addChild(playerView);		  		  //Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 		  			//Loop through all the circles and check for collisions		  for (var j:int = 0; j < _models.length; j++)			{ 			  //Update the models			  _models[j].update();			  			  //Check for stage boundaries			  StageBoundaries.bounce(_models[j], stage);			  			  //The first model			  //to use in the collision check				var c1:CircleModel = _models[j];								for (var k:int = j + 1; k < _models.length; k++)				{				  //The second model			    //to use in the collision check					var c2:CircleModel = _models[k];			    					//Check for a collision					checkCollision(c1, c2);				}			}		  //Update the status box (if you need to)			_statusBox.text = "MULTIPLE OBJECT COLLISION";		}				private function checkCollision		  (c1:CircleModel, c2:CircleModel):void		{      //Vector between circles			var v0:VectorModel = new VectorModel(c1.xPos, c1.yPos, 			                                     c2.xPos, c2.yPos);       			var totalRadii:Number = c1.radius + c2.radius;  						if(v0.m < totalRadii)			{ 			  var overlap:Number = totalRadii - v0.m;			  			  var collision_Vx:Number = Math.abs(v0.dx * overlap / 2);        var collision_Vy:Number = Math.abs(v0.dy * overlap / 2);								var xSide:int;				var ySide:int;								c1.xPos > c2.xPos ? xSide = 1 : xSide = -1;				c1.yPos > c2.yPos ? ySide = 1 : ySide = -1;								//Reposition _c1 out of the collision					c1.setX = c1.xPos + (collision_Vx * xSide);        c1.setY = c1.yPos + (collision_Vy * ySide);                //Reposition _c2 using _c1's original position before it        //was repositioned in the two lines of code above        c2.setX = c2.xPos + (collision_Vx * -xSide);        c2.setY = c2.yPos + (collision_Vy * -ySide);                //c1's motion vector  		  var v1:VectorModel   		    = new VectorModel  		    (  		      c1.xPos,   		      c1.yPos,   		      c1.xPos + c1.vx,   		      c1.yPos + c1.vy  		    );  			                                       	  	//c2's motion vector        var v2:VectorModel           = new VectorModel          (            c2.xPos,             c2.yPos,             c2.xPos + c2.vx,             c2.yPos + c2.vy          );                                                                                         var p1a:VectorModel = VectorMath.project(v1, v0);        var p1b:VectorModel = VectorMath.project(v1, v0.ln);                      //Project v2 onto v0 and vo.ln        var p2a:VectorModel = VectorMath.project(v2, v0);        var p2b:VectorModel = VectorMath.project(v2, v0.ln);                   //Bounce c1        //Combine p1b and p2a        c1.vx = p1b.vx + p2a.vx;         c1.vy = p1b.vy + p2a.vy;                 //Bounce c2        //Combine p1a and p2b        c2.vx = p1a.vx + p2b.vx;        c2.vy = p1a.vy + p2b.vy;      }		}	}}