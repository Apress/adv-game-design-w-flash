package{	import flash.events.Event;  import flash.display.Sprite;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400", backgroundColor="#FFFFFF", frameRate="60")]  	public class CircleVsParticle extends Sprite	{			//Circle  		private var _circle:CircleModel   		  = new CircleModel(30);  		private var _UIController:UIController   		  = new UIController(_circle);  		private var _circle_View:CircleView   		  = new CircleView(_circle);  		private var _UIView:UIView   		  = new UIView(_circle, _UIController, stage);  		  		//Particle  		private var _particle:CircleModel   		  = new CircleModel(1, 0x000000);  		private var _particle_View:CircleView   		  = new CircleView(_particle);  		//Status box  		private var _statusBox:StatusBox = new StatusBox;  		  		private var _collision:Boolean = false;				public function CircleVsParticle():void		{ 		  //Circle			addChild(_circle_View);			_circle.setX = 300;			_circle.setY = 200;						//Particle			addChild(_particle_View);			_particle.setX = 200;			_particle.setY = 200;		  		  //Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 			//Update the circle			_circle.update();			StageBoundaries.wrap(_circle, stage);       						//Update the particle			_particle.update();			StageBoundaries.wrap(_particle, stage);			      //Vector between circle and particle			var v0:VectorModel 			  = new VectorModel			    (			      _circle.xPos, 			      _circle.yPos, 			      _particle.xPos, 			      _particle.yPos			    );   						if(v0.m < _circle.radius)			{			  _collision = true;			  			  //Find the amount of overlap 				var overlap:Number = _circle.radius - v0.m;                      			  _circle.setX = _circle.xPos - (overlap * v0.dx);				_circle.setY = _circle.yPos - (overlap * v0.dy);                //Circle's motion vector  			var v1:VectorModel   			  = new VectorModel  			  (  			    _circle.xPos,   			    _circle.yPos,   			    _circle.xPos + _circle.vx,   			    _circle.yPos + _circle.vy  			  );  			                                             //Create the circle's bounce vector                          var bounce_circle:VectorModel = VectorMath.bounce(v1, v0.ln);                //Bounce the circle        _circle.vx = bounce_circle.vx;         _circle.vy = bounce_circle.vy;			}	   			//Update status box			_statusBox.text = "CIRCLE VS PARTICLE:";		}	}}