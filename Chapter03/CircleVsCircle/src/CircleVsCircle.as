package{	import flash.events.Event;  import flash.display.Sprite;  import com.friendsofed.utils.*;  import com.friendsofed.gameElements.primitives.*;  import com.friendsofed.vector.*;  [SWF(width="550", height="400",   backgroundColor="#FFFFFF", frameRate="60")]  	public class CircleVsCircle extends Sprite	{		//Circle 1 (player's circle)		private var _c1:CircleModel 		  = new CircleModel(30);		private var _UIController:UIController 		  = new UIController(_c1);		private var _c1_View:CircleView 		  = new CircleView(_c1);		private var _UIView:UIView 		  = new UIView(_c1, _UIController, stage);				//Circle 2		private var _c2:CircleModel = new CircleModel(30);		private var _c2_View:CircleView = new CircleView(_c2);		//Status box		private var _statusBox:StatusBox = new StatusBox;				public function CircleVsCircle():void		{ 		  //Circle 1			addChild(_c1_View);			_c1.setX = 300;			_c1.setY = 200;						//Circle 2			addChild(_c2_View);			_c2.setX = 200;			_c2.setY = 200;		  		  //Add the status box			addChild(_statusBox);						addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler(event:Event):void		{ 			//Update c1 (player's circle)			_c1.update();			StageBoundaries.wrap(_c1, stage);       						//Update c2			_c2.update();			StageBoundaries.wrap(_c2, stage);			      //Vector between the circles			var v0:VectorModel 			  = new VectorModel(_c1.xPos, _c1.yPos, _c2.xPos, _c2.yPos);                               						//Calculate the radii of both circles combined			var totalRadii:Number = _c1.radius + _c2.radius;                             						if(v0.m < totalRadii)			{			  //A collision is happening			  //Find the amount of overlap between circles				var overlap:Number = totalRadii - v0.m;                      			  _c1.setX = _c1.xPos - (overlap * v0.dx);				_c1.setY = _c1.yPos - (overlap * v0.dy);				        //_c1's motion vector  			var v1:VectorModel   			  = new VectorModel  			  (  			    _c1.xPos,   			    _c1.yPos,   			    _c1.xPos + _c1.vx,   			    _c1.yPos + _c1.vy  			  );  			                                             //Create c1's bounce vector                          var bounce_C1:VectorModel = VectorMath.bounce(v1, v0.ln);                //Bounce c1        _c1.vx = bounce_C1.vx;         _c1.vy = bounce_C1.vy;			}	    else	    {	      //No collision	    }	    			//Update status box			_statusBox.text = "CIRCLE VS CIRCLE:";		}	}}