package com.friendsofed.utils{	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.text.*;	public class GridDisplay extends Sprite	{		[Embed(systemFont="Courier New", fontName="embeddedFont", 		fontWeight="normal", advancedAntiAliasing="true", 		mimeType="application/x-font")]    private var EmbeddedFontClass:Class;				private var _cellSize:uint;		private var _width:uint;		private var _height:uint;		private var _color:uint;		private var _displayLabels:Boolean;		private var _format:TextFormat;		private var _textField:TextField;				public function GridDisplay		  (		    cellSize:uint = 30, 		    width:uint = 300, 		    height:uint = 300, 		    color:uint = 0x000000, 		    displayLabels:Boolean = true		   ):void		{			this._cellSize = cellSize;			this._width = width;			this._height = height;			this._color = color;			this._displayLabels = displayLabels;						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(event:Event):void		{			if(_displayLabels)			{				//Create a text format object				_format = new TextFormat();				_format.size = _cellSize /2 ;				_format.color = _color;				//The name of the font should match 				//the "name" parameter in the embed tag				_format.font = "embeddedFont";			}						drawGrid();						addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}		private function onRemovedFromStage(event:Event):void		{			removeEventListener			  (Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener			  (Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}		private function drawGrid():void		{			//Create a Shape object that will draw the grid lines			var gridLine:Shape = new Shape();			gridLine.graphics.lineStyle(0, 0.5);			addChild(gridLine);						//Draw vertical lines			for(var i:int = 0; i <= _width; i += _cellSize)			{				gridLine.graphics.moveTo(i,0);				gridLine.graphics.lineTo(i, _height);								//Add grid labels				if(_displayLabels)				{					//The if statment prevents the last label from displaying					if(i != _width)					{						var gridLabelX:TextField = new TextField();						gridLabelX.embedFonts = true;						gridLabelX.autoSize = TextFieldAutoSize.LEFT;						gridLabelX.text = String(i);						gridLabelX.setTextFormat(_format);						gridLabelX.antiAliasType 						  = flash.text.AntiAliasType.ADVANCED;						addChild(gridLabelX);						gridLabelX.x = i;					}				}			}			//Draw horizontal lines			for(var j:int = 0; j <= _height; j += _cellSize)			{				//Draw lines				gridLine.graphics.moveTo(0, j);				gridLine.graphics.lineTo(_width, j);								//Add grid labels				if(_displayLabels)				{					//The if statment prevents the last 					//and first duplicate label ("0") from displaying					if((j != _height) && (j > 0))					{						var gridLabelY:TextField = new TextField();						gridLabelY.embedFonts = true;						gridLabelY.autoSize = TextFieldAutoSize.LEFT;						gridLabelY.text = String(j);						gridLabelY.setTextFormat(_format);						gridLabelY.antiAliasType 						  = flash.text.AntiAliasType.ADVANCED;						addChild(gridLabelY);						gridLabelY.y = j;					}				}			}    }	}}