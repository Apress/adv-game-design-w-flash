package com.friendsofed.utils{	import flash.display.MovieClip;		public class StageBoundaries	{		public function StageBoundaries()		{		}				//Screen wrapping		static public function wrap(object:Object, stage:Object):void		{			if(object.xPos > stage.stageWidth + (object.width* 0.5))			{				object.setX = 0 - (object.width* 0.5);			}			else if (object.xPos < 0 - (object.width* 0.5))			{				object.setX = stage.stageWidth + (object.width* 0.5);			}			else if(object.yPos > stage.stageHeight + (object.height* 0.5))			{				object.setY = 0 - (object.height* 0.5);			}			else if (object.yPos < 0 - (object.height* 0.5))			{				object.setY = stage.stageHeight + (object.height* 0.5);			}		}				static public function wrapBackground		  (object:Object, stage:Object):void		{			if(object.x > stage.stageWidth + (object.width* 0.5))			{				object.x = 0 - (object.width* 0.5);			}			else if (object.x < 0 - (object.width* 0.5))			{				object.x = stage.stageWidth + (object.width* 0.5);			}			else if(object.y > stage.stageHeight + (object.height* 0.5))			{				object.y = 0 - (object.height* 0.5);			}			else if (object.y < 0 - (object.height* 0.5))			{				object.y = stage.stageHeight + (object.height* 0.5);			}		}				//Stop object at stage edges		static public function stop(object:Object, stage:Object):void		{			if (object.xPos + (object.width* 0.5) > stage.stageWidth)			{				object.setX = stage.stageWidth - (object.width* 0.5);				object.vx = 0;			}			else if (object.xPos - (object.width * 0.5) < 0)			{				object.setX = 0 + (object.width* 0.5);				object.vx = 0;			}			if (object.yPos - (object.height* 0.5) < 0)			{				object.setY = 0 + (object.height* 0.5);				object.vy = 0;			}			else if (object.yPos + (object.height* 0.5) > stage.stageHeight)			{				object.setY = stage.stageHeight - (object.height* 0.5);				object.vy = 0;			}		}		//Bounce object at stage edges		static public function bounce(object:Object, stage:Object):void		{			if (object.xPos + (object.width* 0.5) > stage.stageWidth)			{				object.setX = stage.stageWidth - (object.width* 0.5);				object.vx *= -1;			}			else if (object.xPos - (object.width* 0.5) < 0)			{				object.setX = 0 + (object.width* 0.5);				object.vx *= -1;			}			if (object.yPos - (object.height* 0.5) < 0)			{				object.setY = 0 + (object.height* 0.5);				object.vy *= -1;			}			else if (object.yPos + (object.height* 0.5) > stage.stageHeight)			{				object.setY = stage.stageHeight - (object.height* 0.5);				object.vy *= -1;			}		}				//Methods for Sprites or MovieClips that use x and y properties		//Screen wrapping		static public function wrapSprite		  (object:Object, stage:Object):void		{			if(object.x > stage.stageWidth + (object.width* 0.5))			{				object.x = 0 - (object.width* 0.5);			}			else if (object.x < 0 - (object.width* 0.5))			{				object.x = stage.stageWidth + (object.width* 0.5);			}			else if(object.y > stage.stageHeight + (object.height* 0.5))			{				object.y = 0 - (object.height* 0.5);			}			else if (object.y < 0 - (object.height* 0.5))			{				object.y = stage.stageHeight + (object.height* 0.5);			}		}				//Stop Sprite at stage edges		static public function stopSprite		  (object:Object, stage:Object):void		{			if (object.x + (object.width* 0.5) > stage.stageWidth)			{				object.x = stage.stageWidth - (object.width* 0.5);				object.vx = 0;			}			else if (object.x - (object.width * 0.5) < 0)			{				object.x = 0 + (object.width* 0.5);				object.vx = 0;			}			if (object.y - (object.height* 0.5) < 0)			{				object.y = 0 + (object.height* 0.5);				object.vy = 0;			}			else if (object.y + (object.height* 0.5) > stage.stageHeight)			{				object.y = stage.stageHeight - (object.height* 0.5);				object.vy = 0;			}		}		//Bounce Sprite at stage edges		static public function bounceSprite		  (object:Object, stage:Object):void		{			if (object.x + (object.width* 0.5) > stage.stageWidth)			{				object.x = stage.stageWidth - (object.width* 0.5);				object.vx *= -1;			}			else if (object.x - (object.width* 0.5) < 0)			{				object.x = 0 + (object.width* 0.5);				object.vx *= -1;			}			if (object.y - (object.height* 0.5) < 0)			{				object.y = 0 + (object.height* 0.5);				object.vy *= -1;			}			else if (object.y + (object.height* 0.5) > stage.stageHeight)			{				object.y = stage.stageHeight - (object.height* 0.5);				object.vy *= -1;			}		}				//Methods for bitmap objects, which have their 		//registration point at 0,0		//Stop object at stage edges		static public function stopBitmap		  (object:Object, stage:Object):void		{			if (object.xPos + (object.width) > stage.stageWidth)			{				object.setX = stage.stageWidth - (object.width);				object.vx = 0;			}			else if (object.xPos < 0)			{				object.setX = 0;				object.vx = 0;			}			if (object.yPos < 0)			{				object.setY = 0;				object.vy = 0;			}			else if (object.yPos + object.height > stage.stageHeight)			{				object.setY = stage.stageHeight - object.height;				object.vy = 0;			}		}		//Screen wrapping		static public function wrapBitmap(object:Object, stage:Object):void		{			if(object.xPos > stage.stageWidth + object.width)			{				object.setX = 0 - object.width;			}			else if (object.xPos < 0 - object.width)			{				object.setX = stage.stageWidth + object.width;			}			else if(object.yPos > stage.stageHeight + object.height)			{				object.setY = 0 - object.height;			}			else if (object.yPos < 0 - object.height)			{				object.setY = stage.stageHeight + object.height;			}		}		//Bounce object at stage edges		static public function bounceBitmap(object:Object, stage:Object):void		{			if (object.xPos + object.width > stage.stageWidth)			{				object.setX = stage.stageWidth - object.width;				object.vx *= -1;			}			else if (object.xPos < 0)			{				object.setX = 0;				object.vx *= -1;			}			if (object.yPos < 0)			{				object.setY = 0;				object.vy *= -1;			}			else if (object.yPos + object.height > stage.stageHeight)			{				object.setY = stage.stageHeight - object.height;				object.vy *= -1;			}		}	}}