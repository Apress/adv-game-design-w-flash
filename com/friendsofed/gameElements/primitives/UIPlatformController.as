package com.friendsofed.gameElements.primitives{	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.events.MouseEvent;	import flash.events.Event;	public class UIPlatformController 	{	  private const EASING:Number = 0.2;	  private const JUMP_FORCE:Number = -25;	  private const SPEED_LIMIT:Number = 100;		private var _model:Object;		private var _stage:Object;    private var _mouse_Vx:Number = 0;    private var _mouse_Vy:Number = 0;		public function UIPlatformController(model:AVerletModel):void 		{			_model = model;		}		internal function processKeyDown(event:KeyboardEvent):void		{		  //_model.friction = 1;		  if(event.keyCode == Keyboard.LEFT)		  {		    _model.acceleration_X = -0.7;		    //_model.vx -= 1;		  }		  if(event.keyCode == Keyboard.RIGHT)		  {		    _model.acceleration_X = 0.7;		    //_model.vx += 1;		  }		  if(event.keyCode == Keyboard.SPACE		  || event.keyCode == Keyboard.UP)		  {		    jump();		  }		}				internal function processKeyUp(event:KeyboardEvent):void  	{  	  if(event.keyCode == Keyboard.LEFT  	  ||(event.keyCode == Keyboard.RIGHT))		  {		    _model.acceleration_X = 0;		  }		  if(event.keyCode == Keyboard.UP  	  ||(event.keyCode == Keyboard.DOWN))		  {		    _model.acceleration_Y = 0;		  }  	}				internal function processUpdate		  (stage:Object):void  	{  	  var vx:Number	    	    if(_model.coordinateSpace == null)	    {	      vx    			= stage.mouseX  			  - (_model.xPos + _model.width * 0.5);		  }		  else		  {		    vx    			= _model.coordinateSpace.mouseX  			  - (_model.xPos + _model.width * 0.5);		  }					if(vx < -SPEED_LIMIT)			{  		    vx = -SPEED_LIMIT	    }	    if(vx > SPEED_LIMIT)			{  		    vx = SPEED_LIMIT	    }	    _model.vx = vx * EASING;	  }	  		internal function processMouseDown		  (event:MouseEvent):void  	{  	  jump();  	}  	  	internal function jump():void  	{  	  if(!_model.jumping)  	  {  	    _model.jumping = true;    	  _model.vy += JUMP_FORCE;  	  }	  }	}}