package com.friendsofed.gameElements.ufo{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.display.*;	import com.friendsofed.gameElements.primitives.*;	public class UfoModel extends AVerletModel	{	  //Track whether the truster is fired	  public var thrusterFired:Boolean = false;	  public var player:AVerletModel;	  private var _playerIsVisible:Boolean = false;	  	  //Track if the ufo can fire bullets	  private var _fireBullet:Boolean = false;	  	  //The UFO's sheild strength	  private var _shield:Number;	  private var _maxShield:int = 100;	  	  //Variable set by the game controller to help	  //the UFO fly elliptically	  public var centerX:int = 275;	  public var centerY:int = 200;	  public var rangeX:int = 500;	  public var rangeY:int = 50;	  	  //A variable to help calculate the elliptical trajectory	  private var _angle:Number = 0;	    		public function UfoModel		  (		    width:uint = 30, 		    height:uint = 30, 		    color:uint = 0x999999		  ):void 		{		  this.width = width;		  this.height = height;		  this.color = color;		}		public function fly():void  	{  	  //rangeX and rangeY are set by the GameController  	  xPos = centerX + Math.sin(_angle) * rangeX;  	  yPos = centerY + Math.cos(_angle) * rangeY;  	      	  //Change the angle slightly        _angle += 0.010;  	}		//Getters and setters		public function get fireBullet():Boolean	  {	    return _fireBullet;	  }	  public function set fireBullet(value:Boolean):void	  {	    _fireBullet = value;	    dispatchEvent(new Event(Event.CHANGE));	  }		public function get playerIsVisible():Boolean		{			return _playerIsVisible;		}		public function set playerIsVisible(value:Boolean):void		{			_playerIsVisible = value;			dispatchEvent(new Event(Event.CHANGE));		}		public function get shield():Number		{		  return _shield;		}		public function set shield(value:Number):void		{		  if(value < _maxShield)		  {		    _shield = value;		  }		  else		  {		    _shield = _maxShield;		  }		  dispatchEvent(new Event(Event.CHANGE));		}	}}