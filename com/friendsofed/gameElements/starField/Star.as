package com.friendsofed.gameElements.starField{	import flash.display.Shape;	import flash.display.Sprite;	import flash.filters.*;	import flash.events.Event;	public class Star extends Sprite	{		private var _size:uint;		private var _color:uint;				public function Star(size:uint = 20, color:uint = 0xFFFF00)		{			this._size = size;			this._color = color;						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(event:Event):void		{			drawStar();		}		private function onRemovedFromStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}		private function drawStar():void		{		  //Create a new Vector object for the drawing coordinates			var starCoordinates:Vector.<Number> = new Vector.<Number>();			//Push the coordinates into the starCoordinates Vector			starCoordinates.push(30,0, 35,15, 50,10, 45,25, 60,30, 45,35, 50,50, 35,45, 30,60, 25,45, 10,50, 15,35, 0,30, 15,25, 10,10, 25,15, 30,0);			//Create a Vector object for the drawing commands			var starCommands:Vector.<int> = new Vector.<int>(); 			//1 = moveTo(), 2 = lineTo(), 3 = curveTo()			starCommands.push(1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2);						//Create the starShape object and draw it.			var starShape:Shape = new Shape();			starShape.graphics.lineStyle();			starShape.graphics.beginFill(_color);			//Use the drawPath command to draw the shape using the starCommands and starCoordinates Vectors			starShape.graphics.drawPath(starCommands, starCoordinates);			starShape.graphics.endFill();			starShape.width = _size;			starShape.height = _size;			//Position the star in the center of the sprite			starShape.x = starShape.x - starShape.width/2;			starShape.y = starShape.y - starShape.height/2;			addChild(starShape);						//Add an optional glow filter to the star			/*			var starFilters:Array = new Array();			starFilters = starShape.filters;			starFilters.push(new GlowFilter(0xFFFFFF, 0.50));			starShape.filters = starFilters;			*/		}		//Getters and setters		//size		public function get size():uint		{			return _size;		}				//xPos		public function get xPos():Number		{			return this.x;		}		public function set xPos(value:Number):void		{			this.x = value;		}				//yPos		public function get yPos():Number		{			return this.y;		}		public function set yPos(value:Number):void		{			this.y = value;		}				//setX		public function set setX(value:Number):void		{			this.x = value;		}				//setY		public function set setY(value:Number):void		{			this.y = value;		}	}}